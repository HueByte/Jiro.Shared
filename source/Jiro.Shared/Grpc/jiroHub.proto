syntax = "proto3";

option csharp_namespace = "Jiro.Shared.Grpc";

import "google/protobuf/timestamp.proto";
package JiroHubProto;

// JiroHub Protocol Buffer Definition
//
// This file defines the gRPC service contract for communication between
// Jiro instances and services. It supports command execution, real-time
// chat messaging, and live word streaming for enhanced user experience.

// JiroHubProto Service
// Main gRPC service for handling communication between Jiro instances and services
service JiroHubProto {
    // Sends command execution results from Jiro instances to services
    // Used for reporting the outcome of executed commands including text or graph data
    rpc SendCommandResult (ClientMessage) returns (CommandResultResponse);


	// Bidirectional streaming for real-time chat communication
	// Both client and server can send ChatMessage objects at any time
	// Enables live chat functionality between users and AI assistants
	rpc StreamChat (stream ChatMessage) returns (stream ChatMessage);

	// Client streaming for chat messages from client to server
	// Allows clients to send multiple chat messages in a stream
	rpc StreamChatMessagesToServer (stream ChatMessage) returns (ChatStreamResponse);

	// Client streaming for logs from client to server
	// Allows clients to continuously send log entries to the server
	rpc StreamLogsToServer (stream LogEntry) returns (LogStreamResponse);

	// Client streaming for word-by-word message content from client to server
	// Allows clients to send message content word by word to the server
	rpc StreamWordsToServer (stream WordStreamUpdate) returns (WordStreamResponse);
}

// ClientMessage
// Represents a command execution result sent from Jiro instances
// Contains command details, execution status, and the actual result data
message ClientMessage {
    string commandName = 1;          // Name of the executed command
    DataType dataType = 2;           // Type of result data (text or graph)
    oneof result {                   // Polymorphic result data
        TextResult textResult = 3;   // Text-based command output
        GraphResult graphResult = 4; // Graph-based command output
    }
    bool isSuccess = 5;              // Whether command executed successfully
    string RequestId = 6;        // Unique identifier for command synchronization
    repeated Pair parameters = 7;    // Command parameters as key-value pairs
    string sessionId = 8;            // Session identifier for context
}

// CommandResultResponse
// Server response acknowledging receipt of command execution results
message CommandResultResponse {
    bool success = 1;
    string message = 2;
}

// DataType
// Specifies the type of data contained in command execution results
enum DataType {
    text = 0;
    graph = 1;
}

// TextType
// Specifies the format of text data in TextResult messages
// Helps clients properly parse and display text content
enum TextType {
    plain = 0;
    json = 1;
    base64 = 2;
    markdown = 3;
    html = 4;
}

// TextResult
// Represents text-based command output with type specification
// Supports various text formats including plain text, JSON, base64, markdown, and HTML
message TextResult {
    string response = 1;
    TextType textType = 2;
}

// GraphResult
// Represents graphical command output for data visualization
// Contains binary graph data along with metadata like axes labels and units
message GraphResult {
    string message = 1;
    bytes graphData = 2;
    string note = 3;
    string xAxis = 4;
    string yAxis = 5;
    map<string, string> units = 6;
}

// Pair
// Generic key-value pair used for passing command parameters
message Pair {
    string key = 1;
    string value = 2;
}

// Session
// Represents a chat or command execution session
// Tracks session metadata including creation and update timestamps
message Session {
    string id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp createdAt = 4;
    google.protobuf.Timestamp updatedAt = 5;
}

// SessionsReply
// Contains a list of available sessions
message SessionsReply {
    repeated Session sessions = 1;
}

// ChatMessage
// Represents a single message in a chat conversation
// Used for both historical messages and real-time streaming
message ChatMessage {
    string id = 1;                           // Unique message identifier
    string content = 2;                      // Message text content
    string author = 3;                       // Author name or identifier
    google.protobuf.Timestamp timestamp = 4; // When message was created
    string sessionId = 5;                    // Session this message belongs to
    MessageType messageType = 6;             // Type of message (USER/ASSISTANT/SYSTEM)
}

// ChatMessagesResponse
// Wrapper for returning multiple chat messages with operation status
message ChatMessagesResponse {
    repeated ChatMessage messages = 1;
    bool success = 2;
    string errorMessage = 3;
}

// MessageType
// Identifies the sender type of a chat message
// Used to distinguish between user input, AI responses, and system notifications
enum MessageType {
    USER = 0;
    ASSISTANT = 1;
    SYSTEM = 2;
}


// ChatStreamResponse
// Response for client streaming chat messages
message ChatStreamResponse {
    bool success = 1;
    string message = 2;
    int32 messagesReceived = 3;
}

// LogEntry
// Represents a single log entry for streaming
message LogEntry {
    string id = 1;
    string level = 2;                        // Log level (DEBUG, INFO, WARN, ERROR)
    string message = 3;                      // Log message content
    string source = 4;                       // Source component or module
    google.protobuf.Timestamp timestamp = 5; // When log was generated
    map<string, string> metadata = 6;        // Additional log metadata
}

// LogStreamResponse
// Response for client streaming logs
message LogStreamResponse {
    bool success = 1;
    string message = 2;
    int32 logsReceived = 3;
}

// WordStreamUpdate
// Represents a word being streamed from client to server
message WordStreamUpdate {
    string sessionId = 1;                    // Session ID for the message
    string messageId = 2;                    // ID of the message being streamed
    string word = 3;                         // The word or token being sent
    int32 position = 4;                      // Position of word in the message
    bool isComplete = 5;                     // True when message is fully streamed
    google.protobuf.Timestamp timestamp = 6; // When this word was sent
}

// WordStreamResponse
// Response for client streaming words
message WordStreamResponse {
    bool success = 1;
    string message = 2;
    int32 wordsReceived = 3;
}
