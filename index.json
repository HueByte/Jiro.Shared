{
  "api/Jiro.Shared.Exceptions.JiroException.html": {
    "href": "api/Jiro.Shared.Exceptions.JiroException.html",
    "title": "Class JiroException | Jiro.Shared Documentation",
    "keywords": "Class JiroException Namespace Jiro.Shared.Exceptions Assembly Jiro.Shared.dll Represents an exception specific to the Jiro application domain with user-friendly messages and detailed error information. public class JiroException : Exception Inheritance object Exception JiroException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JiroException(Exception, string) Initializes a new instance of the JiroException class with an inner exception and user message. public JiroException(Exception exception, string userMessage) Parameters exception Exception The inner exception that caused this exception. userMessage string The user-friendly error message. JiroException(Exception, string, params string[]) Initializes a new instance of the JiroException class with an inner exception, user message, and additional details. public JiroException(Exception exception, string userMessage, params string[] details) Parameters exception Exception The inner exception that caused this exception. userMessage string The user-friendly error message. details string[] Additional error details. JiroException(string) Initializes a new instance of the JiroException class with a user message. public JiroException(string userMessage) Parameters userMessage string The user-friendly error message. JiroException(string, params string[]) Initializes a new instance of the JiroException class with a user message and additional details. public JiroException(string userMessage, params string[] details) Parameters userMessage string The user-friendly error message. details string[] Additional error details. Properties Details Gets or sets additional error details that provide more context about the exception. public string[] Details { get; set; } Property Value string[] UserMessage Gets or sets the user-friendly error message that can be displayed to end users. public string UserMessage { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Exceptions.html": {
    "href": "api/Jiro.Shared.Exceptions.html",
    "title": "Namespace Jiro.Shared.Exceptions | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Exceptions Classes JiroException Represents an exception specific to the Jiro application domain with user-friendly messages and detailed error information."
  },
  "api/Jiro.Shared.Extensions.ServiceExtensions.html": {
    "href": "api/Jiro.Shared.Extensions.ServiceExtensions.html",
    "title": "Class ServiceExtensions | Jiro.Shared Documentation",
    "keywords": "Class ServiceExtensions Namespace Jiro.Shared.Extensions Assembly Jiro.Shared.dll public static class ServiceExtensions Inheritance object ServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMySqlContext<T>(IServiceCollection, string) Registers a MySQL DbContext of type T with the specified connection string. public static IServiceCollection AddMySqlContext<T>(this IServiceCollection services, string connectionString) where T : DbContext Parameters services IServiceCollection The service collection to add the DbContext to. connectionString string The MySQL connection string. Returns IServiceCollection The updated IServiceCollection. Type Parameters T The type of the DbContext to register. AddSqliteContext<T>(IServiceCollection, string) Registers a SQLite DbContext of type T with the specified connection string. public static IServiceCollection AddSqliteContext<T>(this IServiceCollection services, string connectionString) where T : DbContext Parameters services IServiceCollection The service collection to add the DbContext to. connectionString string The SQLite connection string or file path. Returns IServiceCollection The updated IServiceCollection. Type Parameters T The type of the DbContext to register."
  },
  "api/Jiro.Shared.Extensions.SignalRStreamExtensions.html": {
    "href": "api/Jiro.Shared.Extensions.SignalRStreamExtensions.html",
    "title": "Class SignalRStreamExtensions | Jiro.Shared Documentation",
    "keywords": "Class SignalRStreamExtensions Namespace Jiro.Shared.Extensions Assembly Jiro.Shared.dll Extension methods for SignalR stream handling to reduce code duplication. public static class SignalRStreamExtensions Inheritance object SignalRStreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnNotification(HubConnection, string, Func<Task>, ILogger?) Registers a parameterless fire-and-forget event handler with logging for the specified event. This method handles simple notifications where no parameters or response are expected. public static void OnNotification(this HubConnection hubConnection, string eventName, Func<Task> handler, ILogger? logger = null) Parameters hubConnection HubConnection The SignalR hub connection eventName string The name of the event to handle handler Func<Task> Function that handles the event logger ILogger Optional logger for diagnostics OnNotification<T>(HubConnection, string, Func<T, Task>, ILogger?) Registers a fire-and-forget event handler with logging for the specified event. This method handles notifications where no response is expected. public static void OnNotification<T>(this HubConnection hubConnection, string eventName, Func<T, Task> handler, ILogger? logger = null) Parameters hubConnection HubConnection The SignalR hub connection eventName string The name of the event to handle handler Func<T, Task> Function that handles the event logger ILogger Optional logger for diagnostics Type Parameters T The type of the event parameter OnRequest<TRequest, TResponse>(HubConnection, string, Func<TRequest, Task<TResponse>>, ILogger?, Func<TRequest, object>?) Registers a request-response handler with logging for the specified event. This method handles standard RPC-style calls where server expects a single response. public static void OnRequest<TRequest, TResponse>(this HubConnection hubConnection, string eventName, Func<TRequest, Task<TResponse>> handler, ILogger? logger = null, Func<TRequest, object>? requestIdSelector = null) Parameters hubConnection HubConnection The SignalR hub connection eventName string The name of the event to handle handler Func<TRequest, Task<TResponse>> Function that handles the request and returns a response logger ILogger Optional logger for diagnostics requestIdSelector Func<TRequest, object> Optional function to extract request ID for logging Type Parameters TRequest The type of the request parameter TResponse The type of the response OnStream<TRequest, TResponse>(HubConnection, string, Func<TRequest, IAsyncEnumerable<TResponse>>, ILogger?) Registers a stream handler that returns an IAsyncEnumerable for the specified event. This is the preferred method for handling server-to-client streaming requests. public static void OnStream<TRequest, TResponse>(this HubConnection hubConnection, string eventName, Func<TRequest, IAsyncEnumerable<TResponse>> streamProvider, ILogger? logger = null) Parameters hubConnection HubConnection The SignalR hub connection eventName string The name of the event to handle streamProvider Func<TRequest, IAsyncEnumerable<TResponse>> Function that provides the stream for a given request logger ILogger Optional logger for diagnostics Type Parameters TRequest The type of the request parameter TResponse The type of the response stream items"
  },
  "api/Jiro.Shared.Extensions.StreamingExtensions.html": {
    "href": "api/Jiro.Shared.Extensions.StreamingExtensions.html",
    "title": "Class StreamingExtensions | Jiro.Shared Documentation",
    "keywords": "Class StreamingExtensions Namespace Jiro.Shared.Extensions Assembly Jiro.Shared.dll Extension methods for streaming data using channels public static class StreamingExtensions Inheritance object StreamingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MergeStreams<T>(IEnumerable<IAsyncEnumerable<T>>, int?, CancellationToken) Merges multiple async enumerable streams into a single channel reader public static ChannelReader<T> MergeStreams<T>(this IEnumerable<IAsyncEnumerable<T>> sources, int? capacity = null, CancellationToken cancellationToken = default) Parameters sources IEnumerable<IAsyncEnumerable<T>> The source async enumerables to merge capacity int? The channel capacity (unbounded if null) cancellationToken CancellationToken Cancellation token Returns ChannelReader<T> A ChannelReader that yields items from all sources Type Parameters T The type of items to stream StreamTransform<TSource, TResult>(IAsyncEnumerable<TSource>, Func<TSource, Task<TResult>>, int?, CancellationToken) Creates a streaming pipeline that transforms items as they flow through public static ChannelReader<TResult> StreamTransform<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, Task<TResult>> transform, int? capacity = null, CancellationToken cancellationToken = default) Parameters source IAsyncEnumerable<TSource> The source async enumerable transform Func<TSource, Task<TResult>> The transformation function capacity int? The channel capacity (unbounded if null) cancellationToken CancellationToken Cancellation token Returns ChannelReader<TResult> A ChannelReader that yields transformed items Type Parameters TSource The source item type TResult The result item type ToAsyncEnumerable<T>(ChannelReader<T>, CancellationToken) Streams data from a ChannelReader to an IAsyncEnumerable public static IAsyncEnumerable<T> ToAsyncEnumerable<T>(this ChannelReader<T> reader, CancellationToken cancellationToken = default) Parameters reader ChannelReader<T> The channel reader source cancellationToken CancellationToken Cancellation token Returns IAsyncEnumerable<T> An async enumerable that yields items from the channel Type Parameters T The type of items to stream ToChannelReader<T>(IAsyncEnumerable<T>, int?, CancellationToken) Converts an IAsyncEnumerable to a ChannelReader for streaming data public static ChannelReader<T> ToChannelReader<T>(this IAsyncEnumerable<T> source, int? capacity = null, CancellationToken cancellationToken = default) Parameters source IAsyncEnumerable<T> The async enumerable source capacity int? The channel capacity (unbounded if null) cancellationToken CancellationToken Cancellation token Returns ChannelReader<T> A ChannelReader that can be used to read the streamed items Type Parameters T The type of items to stream"
  },
  "api/Jiro.Shared.Extensions.html": {
    "href": "api/Jiro.Shared.Extensions.html",
    "title": "Namespace Jiro.Shared.Extensions | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Extensions Classes ServiceExtensions SignalRStreamExtensions Extension methods for SignalR stream handling to reduce code duplication. StreamingExtensions Extension methods for streaming data using channels"
  },
  "api/Jiro.Shared.Grpc.ChatMessage.html": {
    "href": "api/Jiro.Shared.Grpc.ChatMessage.html",
    "title": "Class ChatMessage | Jiro.Shared Documentation",
    "keywords": "Class ChatMessage Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll ChatMessage Represents a single message in a chat conversation Used for both historical messages and real-time streaming public sealed class ChatMessage : IMessage<ChatMessage>, IEquatable<ChatMessage>, IDeepCloneable<ChatMessage>, IBufferMessage, IMessage Inheritance object ChatMessage Implements IMessage<ChatMessage> IEquatable<ChatMessage> IDeepCloneable<ChatMessage> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChatMessage() public ChatMessage() ChatMessage(ChatMessage) public ChatMessage(ChatMessage other) Parameters other ChatMessage Fields AuthorFieldNumber Field number for the \"author\" field. public const int AuthorFieldNumber = 3 Field Value int ContentFieldNumber Field number for the \"content\" field. public const int ContentFieldNumber = 2 Field Value int IdFieldNumber Field number for the \"id\" field. public const int IdFieldNumber = 1 Field Value int MessageTypeFieldNumber Field number for the \"messageType\" field. public const int MessageTypeFieldNumber = 6 Field Value int SessionIdFieldNumber Field number for the \"sessionId\" field. public const int SessionIdFieldNumber = 5 Field Value int TimestampFieldNumber Field number for the \"timestamp\" field. public const int TimestampFieldNumber = 4 Field Value int Properties Author Author name or identifier public string Author { get; set; } Property Value string Content Message text content public string Content { get; set; } Property Value string Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Id Unique message identifier public string Id { get; set; } Property Value string MessageType Type of message (USER/ASSISTANT/SYSTEM) public MessageType MessageType { get; set; } Property Value MessageType Parser public static MessageParser<ChatMessage> Parser { get; } Property Value MessageParser<ChatMessage> SessionId Session this message belongs to public string SessionId { get; set; } Property Value string Timestamp When message was created public Timestamp Timestamp { get; set; } Property Value Timestamp Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public ChatMessage Clone() Returns ChatMessage A deep clone of this object. Equals(ChatMessage) Indicates whether the current object is equal to another object of the same type. public bool Equals(ChatMessage other) Parameters other ChatMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(ChatMessage) Merges the given message into this one. public void MergeFrom(ChatMessage other) Parameters other ChatMessage Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.ChatMessagesResponse.html": {
    "href": "api/Jiro.Shared.Grpc.ChatMessagesResponse.html",
    "title": "Class ChatMessagesResponse | Jiro.Shared Documentation",
    "keywords": "Class ChatMessagesResponse Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll ChatMessagesResponse Wrapper for returning multiple chat messages with operation status public sealed class ChatMessagesResponse : IMessage<ChatMessagesResponse>, IEquatable<ChatMessagesResponse>, IDeepCloneable<ChatMessagesResponse>, IBufferMessage, IMessage Inheritance object ChatMessagesResponse Implements IMessage<ChatMessagesResponse> IEquatable<ChatMessagesResponse> IDeepCloneable<ChatMessagesResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChatMessagesResponse() public ChatMessagesResponse() ChatMessagesResponse(ChatMessagesResponse) public ChatMessagesResponse(ChatMessagesResponse other) Parameters other ChatMessagesResponse Fields ErrorMessageFieldNumber Field number for the \"errorMessage\" field. public const int ErrorMessageFieldNumber = 3 Field Value int MessagesFieldNumber Field number for the \"messages\" field. public const int MessagesFieldNumber = 1 Field Value int SuccessFieldNumber Field number for the \"success\" field. public const int SuccessFieldNumber = 2 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor ErrorMessage public string ErrorMessage { get; set; } Property Value string Messages public RepeatedField<ChatMessage> Messages { get; } Property Value RepeatedField<ChatMessage> Parser public static MessageParser<ChatMessagesResponse> Parser { get; } Property Value MessageParser<ChatMessagesResponse> Success public bool Success { get; set; } Property Value bool Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public ChatMessagesResponse Clone() Returns ChatMessagesResponse A deep clone of this object. Equals(ChatMessagesResponse) Indicates whether the current object is equal to another object of the same type. public bool Equals(ChatMessagesResponse other) Parameters other ChatMessagesResponse An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(ChatMessagesResponse) Merges the given message into this one. public void MergeFrom(ChatMessagesResponse other) Parameters other ChatMessagesResponse Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.ChatStreamResponse.html": {
    "href": "api/Jiro.Shared.Grpc.ChatStreamResponse.html",
    "title": "Class ChatStreamResponse | Jiro.Shared Documentation",
    "keywords": "Class ChatStreamResponse Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll ChatStreamResponse Response for client streaming chat messages public sealed class ChatStreamResponse : IMessage<ChatStreamResponse>, IEquatable<ChatStreamResponse>, IDeepCloneable<ChatStreamResponse>, IBufferMessage, IMessage Inheritance object ChatStreamResponse Implements IMessage<ChatStreamResponse> IEquatable<ChatStreamResponse> IDeepCloneable<ChatStreamResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChatStreamResponse() public ChatStreamResponse() ChatStreamResponse(ChatStreamResponse) public ChatStreamResponse(ChatStreamResponse other) Parameters other ChatStreamResponse Fields MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 2 Field Value int MessagesReceivedFieldNumber Field number for the \"messagesReceived\" field. public const int MessagesReceivedFieldNumber = 3 Field Value int SuccessFieldNumber Field number for the \"success\" field. public const int SuccessFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Message public string Message { get; set; } Property Value string MessagesReceived public int MessagesReceived { get; set; } Property Value int Parser public static MessageParser<ChatStreamResponse> Parser { get; } Property Value MessageParser<ChatStreamResponse> Success public bool Success { get; set; } Property Value bool Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public ChatStreamResponse Clone() Returns ChatStreamResponse A deep clone of this object. Equals(ChatStreamResponse) Indicates whether the current object is equal to another object of the same type. public bool Equals(ChatStreamResponse other) Parameters other ChatStreamResponse An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(ChatStreamResponse) Merges the given message into this one. public void MergeFrom(ChatStreamResponse other) Parameters other ChatStreamResponse Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.ClientMessage.ResultOneofCase.html": {
    "href": "api/Jiro.Shared.Grpc.ClientMessage.ResultOneofCase.html",
    "title": "Enum ClientMessage.ResultOneofCase | Jiro.Shared Documentation",
    "keywords": "Enum ClientMessage.ResultOneofCase Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Enum of possible cases for the \"result\" oneof. public enum ClientMessage.ResultOneofCase Fields GraphResult = 4 None = 0 TextResult = 3"
  },
  "api/Jiro.Shared.Grpc.ClientMessage.html": {
    "href": "api/Jiro.Shared.Grpc.ClientMessage.html",
    "title": "Class ClientMessage | Jiro.Shared Documentation",
    "keywords": "Class ClientMessage Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll ClientMessage Represents a command execution result sent from Jiro instances Contains command details, execution status, and the actual result data public sealed class ClientMessage : IMessage<ClientMessage>, IEquatable<ClientMessage>, IDeepCloneable<ClientMessage>, IBufferMessage, IMessage Inheritance object ClientMessage Implements IMessage<ClientMessage> IEquatable<ClientMessage> IDeepCloneable<ClientMessage> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ClientMessageExtensions.ToTrackedObject(ClientMessage) ClientMessageExtensions.ToTrackedObject(ClientMessage, string) Constructors ClientMessage() public ClientMessage() ClientMessage(ClientMessage) public ClientMessage(ClientMessage other) Parameters other ClientMessage Fields CommandNameFieldNumber Field number for the \"commandName\" field. public const int CommandNameFieldNumber = 1 Field Value int DataTypeFieldNumber Field number for the \"dataType\" field. public const int DataTypeFieldNumber = 2 Field Value int GraphResultFieldNumber Field number for the \"graphResult\" field. public const int GraphResultFieldNumber = 4 Field Value int IsSuccessFieldNumber Field number for the \"isSuccess\" field. public const int IsSuccessFieldNumber = 5 Field Value int ParametersFieldNumber Field number for the \"parameters\" field. public const int ParametersFieldNumber = 7 Field Value int RequestIdFieldNumber Field number for the \"RequestId\" field. public const int RequestIdFieldNumber = 6 Field Value int SessionIdFieldNumber Field number for the \"sessionId\" field. public const int SessionIdFieldNumber = 8 Field Value int TextResultFieldNumber Field number for the \"textResult\" field. public const int TextResultFieldNumber = 3 Field Value int Properties CommandName Name of the executed command public string CommandName { get; set; } Property Value string DataType Type of result data (text or graph) public DataType DataType { get; set; } Property Value DataType Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor GraphResult Graph-based command output public GraphResult GraphResult { get; set; } Property Value GraphResult IsSuccess Whether command executed successfully public bool IsSuccess { get; set; } Property Value bool Parameters Command parameters as key-value pairs public RepeatedField<Pair> Parameters { get; } Property Value RepeatedField<Pair> Parser public static MessageParser<ClientMessage> Parser { get; } Property Value MessageParser<ClientMessage> RequestId Unique identifier for command synchronization public string RequestId { get; set; } Property Value string ResultCase public ClientMessage.ResultOneofCase ResultCase { get; } Property Value ClientMessage.ResultOneofCase SessionId Session identifier for context public string SessionId { get; set; } Property Value string TextResult Text-based command output public TextResult TextResult { get; set; } Property Value TextResult Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. ClearResult() public void ClearResult() Clone() Creates a deep clone of this object. public ClientMessage Clone() Returns ClientMessage A deep clone of this object. Equals(ClientMessage) Indicates whether the current object is equal to another object of the same type. public bool Equals(ClientMessage other) Parameters other ClientMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(ClientMessage) Merges the given message into this one. public void MergeFrom(ClientMessage other) Parameters other ClientMessage Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.ClientMessageExtensions.html": {
    "href": "api/Jiro.Shared.Grpc.ClientMessageExtensions.html",
    "title": "Class ClientMessageExtensions | Jiro.Shared Documentation",
    "keywords": "Class ClientMessageExtensions Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Extension methods for converting gRPC ClientMessage to response objects public static class ClientMessageExtensions Inheritance object ClientMessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToTrackedObject(ClientMessage) Converts a gRPC ClientMessage to the appropriate response type public static SessionCommandResponse ToTrackedObject(this ClientMessage clientMessage) Parameters clientMessage ClientMessage The gRPC ClientMessage to convert Returns SessionCommandResponse A response object that can be used with the TaskManager ToTrackedObject(ClientMessage, string) Converts a gRPC ClientMessage to the appropriate response type with instance ID public static SessionCommandResponse ToTrackedObject(this ClientMessage clientMessage, string instanceId) Parameters clientMessage ClientMessage The gRPC ClientMessage to convert instanceId string The instance ID to include in the synchronization token Returns SessionCommandResponse A response object that can be used with the TaskManager"
  },
  "api/Jiro.Shared.Grpc.CommandResultResponse.html": {
    "href": "api/Jiro.Shared.Grpc.CommandResultResponse.html",
    "title": "Class CommandResultResponse | Jiro.Shared Documentation",
    "keywords": "Class CommandResultResponse Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll CommandResultResponse Server response acknowledging receipt of command execution results public sealed class CommandResultResponse : IMessage<CommandResultResponse>, IEquatable<CommandResultResponse>, IDeepCloneable<CommandResultResponse>, IBufferMessage, IMessage Inheritance object CommandResultResponse Implements IMessage<CommandResultResponse> IEquatable<CommandResultResponse> IDeepCloneable<CommandResultResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CommandResultResponse() public CommandResultResponse() CommandResultResponse(CommandResultResponse) public CommandResultResponse(CommandResultResponse other) Parameters other CommandResultResponse Fields MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 2 Field Value int SuccessFieldNumber Field number for the \"success\" field. public const int SuccessFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Message public string Message { get; set; } Property Value string Parser public static MessageParser<CommandResultResponse> Parser { get; } Property Value MessageParser<CommandResultResponse> Success public bool Success { get; set; } Property Value bool Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public CommandResultResponse Clone() Returns CommandResultResponse A deep clone of this object. Equals(CommandResultResponse) Indicates whether the current object is equal to another object of the same type. public bool Equals(CommandResultResponse other) Parameters other CommandResultResponse An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(CommandResultResponse) Merges the given message into this one. public void MergeFrom(CommandResultResponse other) Parameters other CommandResultResponse Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.DataType.html": {
    "href": "api/Jiro.Shared.Grpc.DataType.html",
    "title": "Enum DataType | Jiro.Shared Documentation",
    "keywords": "Enum DataType Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll DataType Specifies the type of data contained in command execution results public enum DataType Fields [OriginalName(\"graph\")] Graph = 1 [OriginalName(\"text\")] Text = 0"
  },
  "api/Jiro.Shared.Grpc.GraphResult.html": {
    "href": "api/Jiro.Shared.Grpc.GraphResult.html",
    "title": "Class GraphResult | Jiro.Shared Documentation",
    "keywords": "Class GraphResult Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll GraphResult Represents graphical command output for data visualization Contains binary graph data along with metadata like axes labels and units public sealed class GraphResult : IMessage<GraphResult>, IEquatable<GraphResult>, IDeepCloneable<GraphResult>, IBufferMessage, IMessage Inheritance object GraphResult Implements IMessage<GraphResult> IEquatable<GraphResult> IDeepCloneable<GraphResult> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GraphResult() public GraphResult() GraphResult(GraphResult) public GraphResult(GraphResult other) Parameters other GraphResult Fields GraphDataFieldNumber Field number for the \"graphData\" field. public const int GraphDataFieldNumber = 2 Field Value int MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 1 Field Value int NoteFieldNumber Field number for the \"note\" field. public const int NoteFieldNumber = 3 Field Value int UnitsFieldNumber Field number for the \"units\" field. public const int UnitsFieldNumber = 6 Field Value int XAxisFieldNumber Field number for the \"xAxis\" field. public const int XAxisFieldNumber = 4 Field Value int YAxisFieldNumber Field number for the \"yAxis\" field. public const int YAxisFieldNumber = 5 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor GraphData public ByteString GraphData { get; set; } Property Value ByteString Message public string Message { get; set; } Property Value string Note public string Note { get; set; } Property Value string Parser public static MessageParser<GraphResult> Parser { get; } Property Value MessageParser<GraphResult> Units public MapField<string, string> Units { get; } Property Value MapField<string, string> XAxis public string XAxis { get; set; } Property Value string YAxis public string YAxis { get; set; } Property Value string Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public GraphResult Clone() Returns GraphResult A deep clone of this object. Equals(GraphResult) Indicates whether the current object is equal to another object of the same type. public bool Equals(GraphResult other) Parameters other GraphResult An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(GraphResult) Merges the given message into this one. public void MergeFrom(GraphResult other) Parameters other GraphResult Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.JiroHubProto.JiroHubProtoBase.html": {
    "href": "api/Jiro.Shared.Grpc.JiroHubProto.JiroHubProtoBase.html",
    "title": "Class JiroHubProto.JiroHubProtoBase | Jiro.Shared Documentation",
    "keywords": "Class JiroHubProto.JiroHubProtoBase Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Base class for server-side implementations of JiroHubProto [BindServiceMethod(typeof(JiroHubProto), \"BindService\")] public abstract class JiroHubProto.JiroHubProtoBase Inheritance object JiroHubProto.JiroHubProtoBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendCommandResult(ClientMessage, ServerCallContext) Sends command execution results from Jiro instances to services Used for reporting the outcome of executed commands including text or graph data public virtual Task<CommandResultResponse> SendCommandResult(ClientMessage request, ServerCallContext context) Parameters request ClientMessage The request received from the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task<CommandResultResponse> The response to send back to the client (wrapped by a task). StreamChat(IAsyncStreamReader<ChatMessage>, IServerStreamWriter<ChatMessage>, ServerCallContext) Bidirectional streaming for real-time chat communication Both client and server can send ChatMessage objects at any time Enables live chat functionality between users and AI assistants public virtual Task StreamChat(IAsyncStreamReader<ChatMessage> requestStream, IServerStreamWriter<ChatMessage> responseStream, ServerCallContext context) Parameters requestStream IAsyncStreamReader<ChatMessage> Used for reading requests from the client. responseStream IServerStreamWriter<ChatMessage> Used for sending responses back to the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task A task indicating completion of the handler. StreamChatMessagesToServer(IAsyncStreamReader<ChatMessage>, ServerCallContext) Client streaming for chat messages from client to server Allows clients to send multiple chat messages in a stream public virtual Task<ChatStreamResponse> StreamChatMessagesToServer(IAsyncStreamReader<ChatMessage> requestStream, ServerCallContext context) Parameters requestStream IAsyncStreamReader<ChatMessage> Used for reading requests from the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task<ChatStreamResponse> The response to send back to the client (wrapped by a task). StreamLogsToServer(IAsyncStreamReader<LogEntry>, ServerCallContext) Client streaming for logs from client to server Allows clients to continuously send log entries to the server public virtual Task<LogStreamResponse> StreamLogsToServer(IAsyncStreamReader<LogEntry> requestStream, ServerCallContext context) Parameters requestStream IAsyncStreamReader<LogEntry> Used for reading requests from the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task<LogStreamResponse> The response to send back to the client (wrapped by a task). StreamWordsToServer(IAsyncStreamReader<WordStreamUpdate>, ServerCallContext) Client streaming for word-by-word message content from client to server Allows clients to send message content word by word to the server public virtual Task<WordStreamResponse> StreamWordsToServer(IAsyncStreamReader<WordStreamUpdate> requestStream, ServerCallContext context) Parameters requestStream IAsyncStreamReader<WordStreamUpdate> Used for reading requests from the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task<WordStreamResponse> The response to send back to the client (wrapped by a task)."
  },
  "api/Jiro.Shared.Grpc.JiroHubProto.JiroHubProtoClient.html": {
    "href": "api/Jiro.Shared.Grpc.JiroHubProto.JiroHubProtoClient.html",
    "title": "Class JiroHubProto.JiroHubProtoClient | Jiro.Shared Documentation",
    "keywords": "Class JiroHubProto.JiroHubProtoClient Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Client for JiroHubProto public class JiroHubProto.JiroHubProtoClient : ClientBase<JiroHubProto.JiroHubProtoClient> Inheritance object ClientBase ClientBase<JiroHubProto.JiroHubProtoClient> JiroHubProto.JiroHubProtoClient Inherited Members ClientBase<JiroHubProto.JiroHubProtoClient>.WithHost(string) ClientBase.CallInvoker object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JiroHubProtoClient() Protected parameterless constructor to allow creation of test doubles. protected JiroHubProtoClient() JiroHubProtoClient(CallInvoker) Creates a new client for JiroHubProto that uses a custom CallInvoker. public JiroHubProtoClient(CallInvoker callInvoker) Parameters callInvoker CallInvoker The callInvoker to use to make remote calls. JiroHubProtoClient(ChannelBase) Creates a new client for JiroHubProto public JiroHubProtoClient(ChannelBase channel) Parameters channel ChannelBase The channel to use to make remote calls. JiroHubProtoClient(ClientBaseConfiguration) Protected constructor to allow creation of configured clients. protected JiroHubProtoClient(ClientBase.ClientBaseConfiguration configuration) Parameters configuration ClientBase.ClientBaseConfiguration The client configuration. Methods NewInstance(ClientBaseConfiguration) Creates a new instance of client from given ClientBaseConfiguration. protected override JiroHubProto.JiroHubProtoClient NewInstance(ClientBase.ClientBaseConfiguration configuration) Parameters configuration ClientBase.ClientBaseConfiguration Returns JiroHubProto.JiroHubProtoClient SendCommandResult(ClientMessage, CallOptions) Sends command execution results from Jiro instances to services Used for reporting the outcome of executed commands including text or graph data public virtual CommandResultResponse SendCommandResult(ClientMessage request, CallOptions options) Parameters request ClientMessage The request to send to the server. options CallOptions The options for the call. Returns CommandResultResponse The response received from the server. SendCommandResult(ClientMessage, Metadata, DateTime?, CancellationToken) Sends command execution results from Jiro instances to services Used for reporting the outcome of executed commands including text or graph data public virtual CommandResultResponse SendCommandResult(ClientMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters request ClientMessage The request to send to the server. headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns CommandResultResponse The response received from the server. SendCommandResultAsync(ClientMessage, CallOptions) Sends command execution results from Jiro instances to services Used for reporting the outcome of executed commands including text or graph data public virtual AsyncUnaryCall<CommandResultResponse> SendCommandResultAsync(ClientMessage request, CallOptions options) Parameters request ClientMessage The request to send to the server. options CallOptions The options for the call. Returns AsyncUnaryCall<CommandResultResponse> The call object. SendCommandResultAsync(ClientMessage, Metadata, DateTime?, CancellationToken) Sends command execution results from Jiro instances to services Used for reporting the outcome of executed commands including text or graph data public virtual AsyncUnaryCall<CommandResultResponse> SendCommandResultAsync(ClientMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters request ClientMessage The request to send to the server. headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncUnaryCall<CommandResultResponse> The call object. StreamChat(CallOptions) Bidirectional streaming for real-time chat communication Both client and server can send ChatMessage objects at any time Enables live chat functionality between users and AI assistants public virtual AsyncDuplexStreamingCall<ChatMessage, ChatMessage> StreamChat(CallOptions options) Parameters options CallOptions The options for the call. Returns AsyncDuplexStreamingCall<ChatMessage, ChatMessage> The call object. StreamChat(Metadata, DateTime?, CancellationToken) Bidirectional streaming for real-time chat communication Both client and server can send ChatMessage objects at any time Enables live chat functionality between users and AI assistants public virtual AsyncDuplexStreamingCall<ChatMessage, ChatMessage> StreamChat(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncDuplexStreamingCall<ChatMessage, ChatMessage> The call object. StreamChatMessagesToServer(CallOptions) Client streaming for chat messages from client to server Allows clients to send multiple chat messages in a stream public virtual AsyncClientStreamingCall<ChatMessage, ChatStreamResponse> StreamChatMessagesToServer(CallOptions options) Parameters options CallOptions The options for the call. Returns AsyncClientStreamingCall<ChatMessage, ChatStreamResponse> The call object. StreamChatMessagesToServer(Metadata, DateTime?, CancellationToken) Client streaming for chat messages from client to server Allows clients to send multiple chat messages in a stream public virtual AsyncClientStreamingCall<ChatMessage, ChatStreamResponse> StreamChatMessagesToServer(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncClientStreamingCall<ChatMessage, ChatStreamResponse> The call object. StreamLogsToServer(CallOptions) Client streaming for logs from client to server Allows clients to continuously send log entries to the server public virtual AsyncClientStreamingCall<LogEntry, LogStreamResponse> StreamLogsToServer(CallOptions options) Parameters options CallOptions The options for the call. Returns AsyncClientStreamingCall<LogEntry, LogStreamResponse> The call object. StreamLogsToServer(Metadata, DateTime?, CancellationToken) Client streaming for logs from client to server Allows clients to continuously send log entries to the server public virtual AsyncClientStreamingCall<LogEntry, LogStreamResponse> StreamLogsToServer(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncClientStreamingCall<LogEntry, LogStreamResponse> The call object. StreamWordsToServer(CallOptions) Client streaming for word-by-word message content from client to server Allows clients to send message content word by word to the server public virtual AsyncClientStreamingCall<WordStreamUpdate, WordStreamResponse> StreamWordsToServer(CallOptions options) Parameters options CallOptions The options for the call. Returns AsyncClientStreamingCall<WordStreamUpdate, WordStreamResponse> The call object. StreamWordsToServer(Metadata, DateTime?, CancellationToken) Client streaming for word-by-word message content from client to server Allows clients to send message content word by word to the server public virtual AsyncClientStreamingCall<WordStreamUpdate, WordStreamResponse> StreamWordsToServer(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncClientStreamingCall<WordStreamUpdate, WordStreamResponse> The call object."
  },
  "api/Jiro.Shared.Grpc.JiroHubProto.html": {
    "href": "api/Jiro.Shared.Grpc.JiroHubProto.html",
    "title": "Class JiroHubProto | Jiro.Shared Documentation",
    "keywords": "Class JiroHubProto Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll JiroHubProto Service Main gRPC service for handling communication between Jiro instances and services public static class JiroHubProto Inheritance object JiroHubProto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor Service descriptor public static ServiceDescriptor Descriptor { get; } Property Value ServiceDescriptor Methods BindService(ServiceBinderBase, JiroHubProtoBase) Register service method with a service binder with or without implementation. Useful when customizing the service binding logic. Note: this method is part of an experimental API that can change or be removed without any prior notice. public static void BindService(ServiceBinderBase serviceBinder, JiroHubProto.JiroHubProtoBase serviceImpl) Parameters serviceBinder ServiceBinderBase Service methods will be bound by calling AddMethod on this object. serviceImpl JiroHubProto.JiroHubProtoBase An object implementing the server-side handling logic. BindService(JiroHubProtoBase) Creates service definition that can be registered with a server public static ServerServiceDefinition BindService(JiroHubProto.JiroHubProtoBase serviceImpl) Parameters serviceImpl JiroHubProto.JiroHubProtoBase An object implementing the server-side handling logic. Returns ServerServiceDefinition"
  },
  "api/Jiro.Shared.Grpc.JiroHubReflection.html": {
    "href": "api/Jiro.Shared.Grpc.JiroHubReflection.html",
    "title": "Class JiroHubReflection | Jiro.Shared Documentation",
    "keywords": "Class JiroHubReflection Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Holder for reflection information generated from Grpc/jiroHub.proto public static class JiroHubReflection Inheritance object JiroHubReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor File descriptor for Grpc/jiroHub.proto public static FileDescriptor Descriptor { get; } Property Value FileDescriptor"
  },
  "api/Jiro.Shared.Grpc.LogEntry.html": {
    "href": "api/Jiro.Shared.Grpc.LogEntry.html",
    "title": "Class LogEntry | Jiro.Shared Documentation",
    "keywords": "Class LogEntry Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll LogEntry Represents a single log entry for streaming public sealed class LogEntry : IMessage<LogEntry>, IEquatable<LogEntry>, IDeepCloneable<LogEntry>, IBufferMessage, IMessage Inheritance object LogEntry Implements IMessage<LogEntry> IEquatable<LogEntry> IDeepCloneable<LogEntry> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogEntry() public LogEntry() LogEntry(LogEntry) public LogEntry(LogEntry other) Parameters other LogEntry Fields IdFieldNumber Field number for the \"id\" field. public const int IdFieldNumber = 1 Field Value int LevelFieldNumber Field number for the \"level\" field. public const int LevelFieldNumber = 2 Field Value int MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 3 Field Value int MetadataFieldNumber Field number for the \"metadata\" field. public const int MetadataFieldNumber = 6 Field Value int SourceFieldNumber Field number for the \"source\" field. public const int SourceFieldNumber = 4 Field Value int TimestampFieldNumber Field number for the \"timestamp\" field. public const int TimestampFieldNumber = 5 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Id public string Id { get; set; } Property Value string Level Log level (DEBUG, INFO, WARN, ERROR) public string Level { get; set; } Property Value string Message Log message content public string Message { get; set; } Property Value string Metadata Additional log metadata public MapField<string, string> Metadata { get; } Property Value MapField<string, string> Parser public static MessageParser<LogEntry> Parser { get; } Property Value MessageParser<LogEntry> Source Source component or module public string Source { get; set; } Property Value string Timestamp When log was generated public Timestamp Timestamp { get; set; } Property Value Timestamp Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public LogEntry Clone() Returns LogEntry A deep clone of this object. Equals(LogEntry) Indicates whether the current object is equal to another object of the same type. public bool Equals(LogEntry other) Parameters other LogEntry An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(LogEntry) Merges the given message into this one. public void MergeFrom(LogEntry other) Parameters other LogEntry Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.LogStreamResponse.html": {
    "href": "api/Jiro.Shared.Grpc.LogStreamResponse.html",
    "title": "Class LogStreamResponse | Jiro.Shared Documentation",
    "keywords": "Class LogStreamResponse Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll LogStreamResponse Response for client streaming logs public sealed class LogStreamResponse : IMessage<LogStreamResponse>, IEquatable<LogStreamResponse>, IDeepCloneable<LogStreamResponse>, IBufferMessage, IMessage Inheritance object LogStreamResponse Implements IMessage<LogStreamResponse> IEquatable<LogStreamResponse> IDeepCloneable<LogStreamResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogStreamResponse() public LogStreamResponse() LogStreamResponse(LogStreamResponse) public LogStreamResponse(LogStreamResponse other) Parameters other LogStreamResponse Fields LogsReceivedFieldNumber Field number for the \"logsReceived\" field. public const int LogsReceivedFieldNumber = 3 Field Value int MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 2 Field Value int SuccessFieldNumber Field number for the \"success\" field. public const int SuccessFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor LogsReceived public int LogsReceived { get; set; } Property Value int Message public string Message { get; set; } Property Value string Parser public static MessageParser<LogStreamResponse> Parser { get; } Property Value MessageParser<LogStreamResponse> Success public bool Success { get; set; } Property Value bool Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public LogStreamResponse Clone() Returns LogStreamResponse A deep clone of this object. Equals(LogStreamResponse) Indicates whether the current object is equal to another object of the same type. public bool Equals(LogStreamResponse other) Parameters other LogStreamResponse An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(LogStreamResponse) Merges the given message into this one. public void MergeFrom(LogStreamResponse other) Parameters other LogStreamResponse Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.MessageType.html": {
    "href": "api/Jiro.Shared.Grpc.MessageType.html",
    "title": "Enum MessageType | Jiro.Shared Documentation",
    "keywords": "Enum MessageType Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll MessageType Identifies the sender type of a chat message Used to distinguish between user input, AI responses, and system notifications public enum MessageType Fields [OriginalName(\"ASSISTANT\")] Assistant = 1 [OriginalName(\"SYSTEM\")] System = 2 [OriginalName(\"USER\")] User = 0"
  },
  "api/Jiro.Shared.Grpc.Pair.html": {
    "href": "api/Jiro.Shared.Grpc.Pair.html",
    "title": "Class Pair | Jiro.Shared Documentation",
    "keywords": "Class Pair Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Pair Generic key-value pair used for passing command parameters public sealed class Pair : IMessage<Pair>, IEquatable<Pair>, IDeepCloneable<Pair>, IBufferMessage, IMessage Inheritance object Pair Implements IMessage<Pair> IEquatable<Pair> IDeepCloneable<Pair> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Pair() public Pair() Pair(Pair) public Pair(Pair other) Parameters other Pair Fields KeyFieldNumber Field number for the \"key\" field. public const int KeyFieldNumber = 1 Field Value int ValueFieldNumber Field number for the \"value\" field. public const int ValueFieldNumber = 2 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Key public string Key { get; set; } Property Value string Parser public static MessageParser<Pair> Parser { get; } Property Value MessageParser<Pair> Value public string Value { get; set; } Property Value string Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public Pair Clone() Returns Pair A deep clone of this object. Equals(Pair) Indicates whether the current object is equal to another object of the same type. public bool Equals(Pair other) Parameters other Pair An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(Pair) Merges the given message into this one. public void MergeFrom(Pair other) Parameters other Pair Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.Session.html": {
    "href": "api/Jiro.Shared.Grpc.Session.html",
    "title": "Class Session | Jiro.Shared Documentation",
    "keywords": "Class Session Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll Session Represents a chat or command execution session Tracks session metadata including creation and update timestamps public sealed class Session : IMessage<Session>, IEquatable<Session>, IDeepCloneable<Session>, IBufferMessage, IMessage Inheritance object Session Implements IMessage<Session> IEquatable<Session> IDeepCloneable<Session> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Session() public Session() Session(Session) public Session(Session other) Parameters other Session Fields CreatedAtFieldNumber Field number for the \"createdAt\" field. public const int CreatedAtFieldNumber = 4 Field Value int DescriptionFieldNumber Field number for the \"description\" field. public const int DescriptionFieldNumber = 3 Field Value int IdFieldNumber Field number for the \"id\" field. public const int IdFieldNumber = 1 Field Value int NameFieldNumber Field number for the \"name\" field. public const int NameFieldNumber = 2 Field Value int UpdatedAtFieldNumber Field number for the \"updatedAt\" field. public const int UpdatedAtFieldNumber = 5 Field Value int Properties CreatedAt public Timestamp CreatedAt { get; set; } Property Value Timestamp Description public string Description { get; set; } Property Value string Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Id public string Id { get; set; } Property Value string Name public string Name { get; set; } Property Value string Parser public static MessageParser<Session> Parser { get; } Property Value MessageParser<Session> UpdatedAt public Timestamp UpdatedAt { get; set; } Property Value Timestamp Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public Session Clone() Returns Session A deep clone of this object. Equals(Session) Indicates whether the current object is equal to another object of the same type. public bool Equals(Session other) Parameters other Session An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(Session) Merges the given message into this one. public void MergeFrom(Session other) Parameters other Session Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.SessionsReply.html": {
    "href": "api/Jiro.Shared.Grpc.SessionsReply.html",
    "title": "Class SessionsReply | Jiro.Shared Documentation",
    "keywords": "Class SessionsReply Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll SessionsReply Contains a list of available sessions public sealed class SessionsReply : IMessage<SessionsReply>, IEquatable<SessionsReply>, IDeepCloneable<SessionsReply>, IBufferMessage, IMessage Inheritance object SessionsReply Implements IMessage<SessionsReply> IEquatable<SessionsReply> IDeepCloneable<SessionsReply> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SessionsReply() public SessionsReply() SessionsReply(SessionsReply) public SessionsReply(SessionsReply other) Parameters other SessionsReply Fields SessionsFieldNumber Field number for the \"sessions\" field. public const int SessionsFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Parser public static MessageParser<SessionsReply> Parser { get; } Property Value MessageParser<SessionsReply> Sessions public RepeatedField<Session> Sessions { get; } Property Value RepeatedField<Session> Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public SessionsReply Clone() Returns SessionsReply A deep clone of this object. Equals(SessionsReply) Indicates whether the current object is equal to another object of the same type. public bool Equals(SessionsReply other) Parameters other SessionsReply An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(SessionsReply) Merges the given message into this one. public void MergeFrom(SessionsReply other) Parameters other SessionsReply Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.TextResult.html": {
    "href": "api/Jiro.Shared.Grpc.TextResult.html",
    "title": "Class TextResult | Jiro.Shared Documentation",
    "keywords": "Class TextResult Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll TextResult Represents text-based command output with type specification Supports various text formats including plain text, JSON, base64, markdown, and HTML public sealed class TextResult : IMessage<TextResult>, IEquatable<TextResult>, IDeepCloneable<TextResult>, IBufferMessage, IMessage Inheritance object TextResult Implements IMessage<TextResult> IEquatable<TextResult> IDeepCloneable<TextResult> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TextResult() public TextResult() TextResult(TextResult) public TextResult(TextResult other) Parameters other TextResult Fields ResponseFieldNumber Field number for the \"response\" field. public const int ResponseFieldNumber = 1 Field Value int TextTypeFieldNumber Field number for the \"textType\" field. public const int TextTypeFieldNumber = 2 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Parser public static MessageParser<TextResult> Parser { get; } Property Value MessageParser<TextResult> Response public string Response { get; set; } Property Value string TextType public TextType TextType { get; set; } Property Value TextType Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public TextResult Clone() Returns TextResult A deep clone of this object. Equals(TextResult) Indicates whether the current object is equal to another object of the same type. public bool Equals(TextResult other) Parameters other TextResult An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(TextResult) Merges the given message into this one. public void MergeFrom(TextResult other) Parameters other TextResult Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.TextType.html": {
    "href": "api/Jiro.Shared.Grpc.TextType.html",
    "title": "Enum TextType | Jiro.Shared Documentation",
    "keywords": "Enum TextType Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll TextType Specifies the format of text data in TextResult messages Helps clients properly parse and display text content public enum TextType Fields [OriginalName(\"base64\")] Base64 = 2 [OriginalName(\"html\")] Html = 4 [OriginalName(\"json\")] Json = 1 [OriginalName(\"markdown\")] Markdown = 3 [OriginalName(\"plain\")] Plain = 0"
  },
  "api/Jiro.Shared.Grpc.WordStreamResponse.html": {
    "href": "api/Jiro.Shared.Grpc.WordStreamResponse.html",
    "title": "Class WordStreamResponse | Jiro.Shared Documentation",
    "keywords": "Class WordStreamResponse Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll WordStreamResponse Response for client streaming words public sealed class WordStreamResponse : IMessage<WordStreamResponse>, IEquatable<WordStreamResponse>, IDeepCloneable<WordStreamResponse>, IBufferMessage, IMessage Inheritance object WordStreamResponse Implements IMessage<WordStreamResponse> IEquatable<WordStreamResponse> IDeepCloneable<WordStreamResponse> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WordStreamResponse() public WordStreamResponse() WordStreamResponse(WordStreamResponse) public WordStreamResponse(WordStreamResponse other) Parameters other WordStreamResponse Fields MessageFieldNumber Field number for the \"message\" field. public const int MessageFieldNumber = 2 Field Value int SuccessFieldNumber Field number for the \"success\" field. public const int SuccessFieldNumber = 1 Field Value int WordsReceivedFieldNumber Field number for the \"wordsReceived\" field. public const int WordsReceivedFieldNumber = 3 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor Message public string Message { get; set; } Property Value string Parser public static MessageParser<WordStreamResponse> Parser { get; } Property Value MessageParser<WordStreamResponse> Success public bool Success { get; set; } Property Value bool WordsReceived public int WordsReceived { get; set; } Property Value int Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public WordStreamResponse Clone() Returns WordStreamResponse A deep clone of this object. Equals(WordStreamResponse) Indicates whether the current object is equal to another object of the same type. public bool Equals(WordStreamResponse other) Parameters other WordStreamResponse An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(WordStreamResponse) Merges the given message into this one. public void MergeFrom(WordStreamResponse other) Parameters other WordStreamResponse Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.WordStreamUpdate.html": {
    "href": "api/Jiro.Shared.Grpc.WordStreamUpdate.html",
    "title": "Class WordStreamUpdate | Jiro.Shared Documentation",
    "keywords": "Class WordStreamUpdate Namespace Jiro.Shared.Grpc Assembly Jiro.Shared.dll WordStreamUpdate Represents a word being streamed from client to server public sealed class WordStreamUpdate : IMessage<WordStreamUpdate>, IEquatable<WordStreamUpdate>, IDeepCloneable<WordStreamUpdate>, IBufferMessage, IMessage Inheritance object WordStreamUpdate Implements IMessage<WordStreamUpdate> IEquatable<WordStreamUpdate> IDeepCloneable<WordStreamUpdate> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WordStreamUpdate() public WordStreamUpdate() WordStreamUpdate(WordStreamUpdate) public WordStreamUpdate(WordStreamUpdate other) Parameters other WordStreamUpdate Fields IsCompleteFieldNumber Field number for the \"isComplete\" field. public const int IsCompleteFieldNumber = 5 Field Value int MessageIdFieldNumber Field number for the \"messageId\" field. public const int MessageIdFieldNumber = 2 Field Value int PositionFieldNumber Field number for the \"position\" field. public const int PositionFieldNumber = 4 Field Value int SessionIdFieldNumber Field number for the \"sessionId\" field. public const int SessionIdFieldNumber = 1 Field Value int TimestampFieldNumber Field number for the \"timestamp\" field. public const int TimestampFieldNumber = 6 Field Value int WordFieldNumber Field number for the \"word\" field. public const int WordFieldNumber = 3 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor IsComplete True when message is fully streamed public bool IsComplete { get; set; } Property Value bool MessageId ID of the message being streamed public string MessageId { get; set; } Property Value string Parser public static MessageParser<WordStreamUpdate> Parser { get; } Property Value MessageParser<WordStreamUpdate> Position Position of word in the message public int Position { get; set; } Property Value int SessionId Session ID for the message public string SessionId { get; set; } Property Value string Timestamp When this word was sent public Timestamp Timestamp { get; set; } Property Value Timestamp Word The word or token being sent public string Word { get; set; } Property Value string Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public WordStreamUpdate Clone() Returns WordStreamUpdate A deep clone of this object. Equals(WordStreamUpdate) Indicates whether the current object is equal to another object of the same type. public bool Equals(WordStreamUpdate other) Parameters other WordStreamUpdate An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(WordStreamUpdate) Merges the given message into this one. public void MergeFrom(WordStreamUpdate other) Parameters other WordStreamUpdate Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/Jiro.Shared.Grpc.html": {
    "href": "api/Jiro.Shared.Grpc.html",
    "title": "Namespace Jiro.Shared.Grpc | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Grpc Classes ChatMessage ChatMessage Represents a single message in a chat conversation Used for both historical messages and real-time streaming ChatMessagesResponse ChatMessagesResponse Wrapper for returning multiple chat messages with operation status ChatStreamResponse ChatStreamResponse Response for client streaming chat messages ClientMessage ClientMessage Represents a command execution result sent from Jiro instances Contains command details, execution status, and the actual result data ClientMessageExtensions Extension methods for converting gRPC ClientMessage to response objects CommandResultResponse CommandResultResponse Server response acknowledging receipt of command execution results GraphResult GraphResult Represents graphical command output for data visualization Contains binary graph data along with metadata like axes labels and units JiroHubProto JiroHubProto Service Main gRPC service for handling communication between Jiro instances and services JiroHubProto.JiroHubProtoBase Base class for server-side implementations of JiroHubProto JiroHubProto.JiroHubProtoClient Client for JiroHubProto JiroHubReflection Holder for reflection information generated from Grpc/jiroHub.proto LogEntry LogEntry Represents a single log entry for streaming LogStreamResponse LogStreamResponse Response for client streaming logs Pair Pair Generic key-value pair used for passing command parameters Session Session Represents a chat or command execution session Tracks session metadata including creation and update timestamps SessionsReply SessionsReply Contains a list of available sessions TextResult TextResult Represents text-based command output with type specification Supports various text formats including plain text, JSON, base64, markdown, and HTML WordStreamResponse WordStreamResponse Response for client streaming words WordStreamUpdate WordStreamUpdate Represents a word being streamed from client to server Enums ClientMessage.ResultOneofCase Enum of possible cases for the \"result\" oneof. DataType DataType Specifies the type of data contained in command execution results MessageType MessageType Identifies the sender type of a chat message Used to distinguish between user input, AI responses, and system notifications TextType TextType Specifies the format of text data in TextResult messages Helps clients properly parse and display text content"
  },
  "api/Jiro.Shared.SynchronizationToken.html": {
    "href": "api/Jiro.Shared.SynchronizationToken.html",
    "title": "Class SynchronizationToken | Jiro.Shared Documentation",
    "keywords": "Class SynchronizationToken Namespace Jiro.Shared Assembly Jiro.Shared.dll Represents a synchronization token containing instance and session identifiers for tracking command execution across distributed systems. public class SynchronizationToken Inheritance object SynchronizationToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SynchronizationToken() Initializes a new instance of the SynchronizationToken class. public SynchronizationToken() SynchronizationToken(string, string, string) Initializes a new instance of the SynchronizationToken class with specified values. public SynchronizationToken(string instanceId, string sessionId, string requestId) Parameters instanceId string The instance identifier. sessionId string The session identifier. requestId string The request identifier. Properties InstanceId Gets or sets the unique identifier of the source instance. public string InstanceId { get; set; } Property Value string RequestId Gets or sets the unique request identifier for tracking. public string RequestId { get; set; } Property Value string SessionId Gets or sets the session identifier for context. public string SessionId { get; set; } Property Value string Methods ToString() Returns a string representation of the synchronization token. public override string ToString() Returns string A string containing the instance, session, and request IDs."
  },
  "api/Jiro.Shared.Tasks.IInstanceTaskManager.html": {
    "href": "api/Jiro.Shared.Tasks.IInstanceTaskManager.html",
    "title": "Interface IInstanceTaskManager | Jiro.Shared Documentation",
    "keywords": "Interface IInstanceTaskManager Namespace Jiro.Shared.Tasks Assembly Jiro.Shared.dll Provides methods for managing tasks associated with specific instances. public interface IInstanceTaskManager : ITaskManager Inherited Members ITaskManager.CancelTask(string) ITaskManager.ExternalExecuteAsync<TResponse>(string, string, Func<Task>, CancellationToken) ITaskManager.ExecuteAsync<TResponse>(string, string, Func<Task<TResponse>>, CancellationToken) ITaskManager.SetTaskResult<TResponse>(string, TResponse) ITaskManager.GetChannelStreamResponseAsync<TResult>(string, string, string, Func<Task>, CancellationToken) ITaskManager.SetChannelStreamResultAsync<TResult>(string, ChannelReader<TResult>) Methods GetRequestInstanceId(string) Gets the instance ID associated with the specified request ID. string GetRequestInstanceId(string requestId) Parameters requestId string The request ID to look up. Returns string The instance ID associated with the request ID. Exceptions InvalidOperationException Thrown if the request ID does not have an associated instance ID."
  },
  "api/Jiro.Shared.Tasks.ITaskManager.html": {
    "href": "api/Jiro.Shared.Tasks.ITaskManager.html",
    "title": "Interface ITaskManager | Jiro.Shared Documentation",
    "keywords": "Interface ITaskManager Namespace Jiro.Shared.Tasks Assembly Jiro.Shared.dll Defines methods for managing asynchronous tasks and their responses. public interface ITaskManager Methods CancelTask(string) Cancels a task with the specified request ID. void CancelTask(string requestId) Parameters requestId string The request ID of the task to cancel. Exceptions ArgumentException Thrown if the request ID is null or empty. InvalidOperationException Thrown if the request ID does not exist. ExecuteAsync<TResponse>(string, string, Func<Task<TResponse>>, CancellationToken) Executes a dispatch that immediately returns a value and optionally waits for an external response. Task<TResponse> ExecuteAsync<TResponse>(string instanceId, string requestId, Func<Task<TResponse>> dispatchAsync, CancellationToken cancellationToken = default) where TResponse : TrackedObject Parameters instanceId string The ID of the instance to execute the task on. requestId string The unique request ID for the task. dispatchAsync Func<Task<TResponse>> The asynchronous function to execute. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<TResponse> A task representing the asynchronous operation, with a response of type TResponse. Type Parameters TResponse The type of the response expected. ExternalExecuteAsync<TResponse>(string, string, Func<Task>, CancellationToken) Executes a task asynchronously and waits for a response. Task<TResponse> ExternalExecuteAsync<TResponse>(string instanceId, string requestId, Func<Task> task, CancellationToken cancellationToken = default) where TResponse : TrackedObject Parameters instanceId string The ID of the instance to execute the task on. requestId string The unique request ID for the task. task Func<Task> The asynchronous task to execute. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<TResponse> A task representing the asynchronous operation, with a response of type TResponse. Type Parameters TResponse The type of the response expected. Exceptions ArgumentException Thrown if the instance ID or request ID is null or empty. GetChannelStreamResponseAsync<TResult>(string, string, string, Func<Task>, CancellationToken) Gets a channel-based stream response asynchronously for the specified request. Task<ChannelReader<TResult>> GetChannelStreamResponseAsync<TResult>(string instanceId, string connectionId, string requestId, Func<Task> streamInvoker, CancellationToken cancellationToken = default) Parameters instanceId string The ID of the instance to execute the stream request on. connectionId string The ID of the connection for the stream. requestId string The unique request ID for the stream. streamInvoker Func<Task> The function to invoke to initiate the stream. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ChannelReader<TResult>> A task representing the asynchronous operation, returning a channel reader. Type Parameters TResult The type of items in the stream. Exceptions ArgumentException Thrown if the instance ID or request ID is null or empty. InvalidOperationException Thrown if the request ID is already pending. SetChannelStreamResultAsync<TResult>(string, ChannelReader<TResult>) Sets the channel stream result from a ChannelReader. Task SetChannelStreamResultAsync<TResult>(string requestId, ChannelReader<TResult> reader) Parameters requestId string The request ID of the stream. reader ChannelReader<TResult> The channel reader to set as the result. Returns Task Type Parameters TResult The type of items in the stream. SetTaskResult<TResponse>(string, TResponse) Sets the result for a pending task with the specified request ID. void SetTaskResult<TResponse>(string requestId, TResponse result) where TResponse : TrackedObject Parameters requestId string The request ID of the task. result TResponse The result to set for the task. Type Parameters TResponse The type of the response."
  },
  "api/Jiro.Shared.Tasks.Models.ChannelStreamTask-1.html": {
    "href": "api/Jiro.Shared.Tasks.Models.ChannelStreamTask-1.html",
    "title": "Struct ChannelStreamTask<TResult> | Jiro.Shared Documentation",
    "keywords": "Struct ChannelStreamTask<TResult> Namespace Jiro.Shared.Tasks.Models Assembly Jiro.Shared.dll Represents a pending channel-based stream task that waits for a client to provide a ChannelReader. This struct is used internally by TaskManager to track channel stream requests and their completion sources. public readonly struct ChannelStreamTask<TResult> Type Parameters TResult The type of items expected in the channel stream. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChannelStreamTask(string, string, TaskCompletionSource<ChannelReader<TResult>>, ChannelWriter<TResult>?) Initializes a new instance of the ChannelStreamTask struct. public ChannelStreamTask(string instanceId, string connectionId, TaskCompletionSource<ChannelReader<TResult>> taskCompletionSource, ChannelWriter<TResult>? writer) Parameters instanceId string The unique identifier of the instance handling this stream request. connectionId string The connection identifier associated with this stream request. taskCompletionSource TaskCompletionSource<ChannelReader<TResult>> The task completion source that will be resolved when the client provides a ChannelReader. writer ChannelWriter<TResult> The channel writer for legacy compatibility (can be null for direct channel passing). Fields ConnectionId The connection identifier associated with this stream request. public readonly string ConnectionId Field Value string InstanceId The unique identifier of the instance handling this stream request. public readonly string InstanceId Field Value string TaskCompletionSource The task completion source that will be resolved when the client provides a ChannelReader. public readonly TaskCompletionSource<ChannelReader<TResult>> TaskCompletionSource Field Value TaskCompletionSource<ChannelReader<TResult>> Writer The channel writer used to buffer stream data from the client. Data from the client's ChannelReader is copied to this writer to ensure availability. public readonly ChannelWriter<TResult>? Writer Field Value ChannelWriter<TResult>"
  },
  "api/Jiro.Shared.Tasks.Models.InstanceManagedTask.html": {
    "href": "api/Jiro.Shared.Tasks.Models.InstanceManagedTask.html",
    "title": "Struct InstanceManagedTask | Jiro.Shared Documentation",
    "keywords": "Struct InstanceManagedTask Namespace Jiro.Shared.Tasks.Models Assembly Jiro.Shared.dll public readonly struct InstanceManagedTask Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InstanceManagedTask(string, TaskCompletionSource<TrackedObject>) public InstanceManagedTask(string instanceId, TaskCompletionSource<TrackedObject> taskCompletionSource) Parameters instanceId string taskCompletionSource TaskCompletionSource<TrackedObject> Fields CreatedAt public readonly DateTime CreatedAt Field Value DateTime InstanceId public readonly string InstanceId Field Value string TaskCompletionSource public readonly TaskCompletionSource<TrackedObject> TaskCompletionSource Field Value TaskCompletionSource<TrackedObject>"
  },
  "api/Jiro.Shared.Tasks.Models.QueuedRequest.html": {
    "href": "api/Jiro.Shared.Tasks.Models.QueuedRequest.html",
    "title": "Class QueuedRequest | Jiro.Shared Documentation",
    "keywords": "Class QueuedRequest Namespace Jiro.Shared.Tasks.Models Assembly Jiro.Shared.dll Represents a queued task request waiting to be processed. public class QueuedRequest Inheritance object QueuedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueuedRequest(string, string, Func<Task>, CancellationToken, TaskCompletionSource<object>, Type) public QueuedRequest(string instanceId, string requestId, Func<Task> dispatchAsync, CancellationToken cancellationToken, TaskCompletionSource<object> taskCompletionSource, Type responseType) Parameters instanceId string requestId string dispatchAsync Func<Task> cancellationToken CancellationToken taskCompletionSource TaskCompletionSource<object> responseType Type Properties CancellationToken public CancellationToken CancellationToken { get; } Property Value CancellationToken DispatchAsync public Func<Task> DispatchAsync { get; } Property Value Func<Task> InstanceId public string InstanceId { get; } Property Value string QueuedAt public DateTime QueuedAt { get; } Property Value DateTime RequestId public string RequestId { get; } Property Value string ResponseType public Type ResponseType { get; } Property Value Type TaskCompletionSource public TaskCompletionSource<object> TaskCompletionSource { get; } Property Value TaskCompletionSource<object>"
  },
  "api/Jiro.Shared.Tasks.Models.QueuedStreamRequest.html": {
    "href": "api/Jiro.Shared.Tasks.Models.QueuedStreamRequest.html",
    "title": "Class QueuedStreamRequest | Jiro.Shared Documentation",
    "keywords": "Class QueuedStreamRequest Namespace Jiro.Shared.Tasks.Models Assembly Jiro.Shared.dll Represents a queued channel stream request waiting to be processed. public class QueuedStreamRequest Inheritance object QueuedStreamRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueuedStreamRequest(string, string, string, Func<Task>, CancellationToken, TaskCompletionSource<object>, Type) public QueuedStreamRequest(string instanceId, string connectionId, string requestId, Func<Task> streamInvoker, CancellationToken cancellationToken, TaskCompletionSource<object> taskCompletionSource, Type resultType) Parameters instanceId string connectionId string requestId string streamInvoker Func<Task> cancellationToken CancellationToken taskCompletionSource TaskCompletionSource<object> resultType Type Properties CancellationToken public CancellationToken CancellationToken { get; } Property Value CancellationToken ConnectionId public string ConnectionId { get; } Property Value string InstanceId public string InstanceId { get; } Property Value string QueuedAt public DateTime QueuedAt { get; } Property Value DateTime RequestId public string RequestId { get; } Property Value string ResultType public Type ResultType { get; } Property Value Type StreamInvoker public Func<Task> StreamInvoker { get; } Property Value Func<Task> TaskCompletionSource public TaskCompletionSource<object> TaskCompletionSource { get; } Property Value TaskCompletionSource<object>"
  },
  "api/Jiro.Shared.Tasks.Models.html": {
    "href": "api/Jiro.Shared.Tasks.Models.html",
    "title": "Namespace Jiro.Shared.Tasks.Models | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Tasks.Models Classes QueuedRequest Represents a queued task request waiting to be processed. QueuedStreamRequest Represents a queued channel stream request waiting to be processed. Structs ChannelStreamTask<TResult> Represents a pending channel-based stream task that waits for a client to provide a ChannelReader. This struct is used internally by TaskManager to track channel stream requests and their completion sources. InstanceManagedTask"
  },
  "api/Jiro.Shared.Tasks.TaskManager.html": {
    "href": "api/Jiro.Shared.Tasks.TaskManager.html",
    "title": "Class TaskManager | Jiro.Shared Documentation",
    "keywords": "Class TaskManager Namespace Jiro.Shared.Tasks Assembly Jiro.Shared.dll Manages asynchronous tasks and streaming operations with timeout monitoring, queueing, and resource limits. Provides thread-safe execution of fire-and-forget dispatches with external result completion. public class TaskManager : IInstanceTaskManager, ITaskManager, IDisposable Inheritance object TaskManager Implements IInstanceTaskManager ITaskManager IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The TaskManager supports two primary operation modes: Regular Tasks: Fire-and-forget execution with external result completion via SetTaskResult<TResponse>(string, TResponse) Stream Tasks: Channel-based streaming with real-time data flow via SetChannelStreamResultAsync<TResult>(string, ChannelReader<TResult>) Example usage for regular tasks: // Execute a command and wait for external result var result = await taskManager.ExternalExecuteAsync<CommandResult>( instanceId: \"instance-1\", requestId: \"req-123\", dispatchAsync: () => hubContext.Clients.Group(instanceId).SendAsync(\"ExecuteCommand\", command), cancellationToken: cancellationToken); // Later, when the external service receives the result: taskManager.SetTaskResult(\"req-123\", commandResult); Example usage for streaming: // Start a streaming operation var reader = await taskManager.GetChannelStreamResponseAsync<StreamItem>( instanceId: \"instance-1\", connectionId: \"conn-456\", requestId: \"stream-789\", streamInvoker: () => hubContext.Clients.Client(connectionId).SendAsync(\"StartStream\", parameters)); // Consume the stream await foreach (var item in reader.ReadAllAsync()) { ProcessStreamItem(item); } Constructors TaskManager(ILogger<TaskManager>, IOptions<TaskManagerOptions>) Initializes a new instance of the TaskManager with the specified configuration. public TaskManager(ILogger<TaskManager> logger, IOptions<TaskManagerOptions> options) Parameters logger ILogger<TaskManager> Logger instance for diagnostics and monitoring. options IOptions<TaskManagerOptions> Configuration options for task management behavior. Exceptions ArgumentNullException Thrown when logger or options is null. ArgumentException Thrown when options validation fails. Methods CancelTask(string) Cancels a pending task with the specified request identifier. public void CancelTask(string requestId) Parameters requestId string The unique identifier of the request to cancel. Remarks If the request exists, its TaskCompletionSource will be set to canceled state. If no pending request is found, a warning is logged but no exception is thrown. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ExecuteAsync<TResponse>(string, string, Func<Task<TResponse>>, CancellationToken) Executes a dispatch that immediately returns a value and optionally waits for an external response. public Task<TResponse> ExecuteAsync<TResponse>(string instanceId, string requestId, Func<Task<TResponse>> dispatchAsync, CancellationToken cancellationToken = default) where TResponse : TrackedObject Parameters instanceId string requestId string dispatchAsync Func<Task<TResponse>> cancellationToken CancellationToken Returns Task<TResponse> Type Parameters TResponse ExternalExecuteAsync<TResponse>(string, string, Func<Task>, CancellationToken) Executes a fire-and-forget dispatch and waits for an external response. public Task<TResponse> ExternalExecuteAsync<TResponse>(string instanceId, string requestId, Func<Task> dispatchAsync, CancellationToken cancellationToken = default) where TResponse : TrackedObject Parameters instanceId string requestId string dispatchAsync Func<Task> cancellationToken CancellationToken Returns Task<TResponse> Type Parameters TResponse GetChannelStreamResponseAsync<TResult>(string, string, string, Func<Task>, CancellationToken) Gets a channel-based stream response asynchronously for the specified request. This method creates a buffered channel that will be populated by SetChannelStreamResultAsync. public Task<ChannelReader<TResult>> GetChannelStreamResponseAsync<TResult>(string instanceId, string connectionId, string requestId, Func<Task> streamInvoker, CancellationToken cancellationToken = default) Parameters instanceId string connectionId string requestId string streamInvoker Func<Task> cancellationToken CancellationToken Returns Task<ChannelReader<TResult>> Type Parameters TResult GetRequestInstanceId(string) Retrieves the instance identifier associated with a pending request. public string GetRequestInstanceId(string requestId) Parameters requestId string The unique identifier of the request. Returns string The instance identifier associated with the specified request. Remarks This method only works for regular tasks managed via ExternalExecuteAsync or ExecuteAsync. Stream requests are managed separately and will not be found by this method. Exceptions InvalidOperationException Thrown when no pending request exists for the specified requestId. SetChannelStreamResultAsync<TResult>(string, ChannelReader<TResult>) Sets the channel stream result from a ChannelReader provided by the client. This method copies data from the provided ChannelReader to the internal buffered channel to ensure data is available when the consumer reads it. public Task SetChannelStreamResultAsync<TResult>(string requestId, ChannelReader<TResult> reader) Parameters requestId string reader ChannelReader<TResult> Returns Task Type Parameters TResult SetTaskResult<TResponse>(string, TResponse) Sets the result for a pending task, typically called by external systems (e.g., external services, SignalR hubs). public void SetTaskResult<TResponse>(string requestId, TResponse result) where TResponse : TrackedObject Parameters requestId string The unique identifier of the pending request. result TResponse The result object to set for the pending task. Type Parameters TResponse The type of the response object, must inherit from TrackedObject. Remarks This method assigns the requestId to the result object and completes the associated TaskCompletionSource. If no pending task exists for the requestId, a warning is logged but no exception is thrown. This is used for regular request-response patterns, not for stream operations."
  },
  "api/Jiro.Shared.Tasks.TaskManagerOptions.html": {
    "href": "api/Jiro.Shared.Tasks.TaskManagerOptions.html",
    "title": "Class TaskManagerOptions | Jiro.Shared Documentation",
    "keywords": "Class TaskManagerOptions Namespace Jiro.Shared.Tasks Assembly Jiro.Shared.dll Configuration options for the TaskManager service. public class TaskManagerOptions Inheritance object TaskManagerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultTimeoutSeconds Default timeout for tasks and streams in seconds. Default is 300 seconds (5 minutes). public int DefaultTimeoutSeconds { get; set; } Property Value int HealthCheckIntervalSeconds Frequency of health check timer in seconds. Default is 300 seconds (5 minutes). public int HealthCheckIntervalSeconds { get; set; } Property Value int MaxPendingStreams Maximum number of pending streams allowed before queueing new requests. Default is 500. public int MaxPendingStreams { get; set; } Property Value int MaxPendingTasks Maximum number of pending tasks allowed before queueing new requests. Default is 1000. public int MaxPendingTasks { get; set; } Property Value int MaxQueueTimeoutSeconds Maximum time to wait in the queue before timing out in seconds. Default is 120 seconds (2 minutes). public int MaxQueueTimeoutSeconds { get; set; } Property Value int MaxTimeoutMonitors Maximum number of timeout monitors allowed. This should match MaxPendingStreams. Default is 500. public int MaxTimeoutMonitors { get; set; } Property Value int Methods Validate() Validates the configuration values and ensures they are within acceptable ranges. public void Validate()"
  },
  "api/Jiro.Shared.Tasks.html": {
    "href": "api/Jiro.Shared.Tasks.html",
    "title": "Namespace Jiro.Shared.Tasks | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Tasks Classes TaskManager Manages asynchronous tasks and streaming operations with timeout monitoring, queueing, and resource limits. Provides thread-safe execution of fire-and-forget dispatches with external result completion. TaskManagerOptions Configuration options for the TaskManager service. Interfaces IInstanceTaskManager Provides methods for managing tasks associated with specific instances. ITaskManager Defines methods for managing asynchronous tasks and their responses."
  },
  "api/Jiro.Shared.TrackedObject.html": {
    "href": "api/Jiro.Shared.TrackedObject.html",
    "title": "Class TrackedObject | Jiro.Shared Documentation",
    "keywords": "Class TrackedObject Namespace Jiro.Shared Assembly Jiro.Shared.dll Base class for objects that require request ID tracking public abstract class TrackedObject Inheritance object TrackedObject Derived ActionResult GetCommandsMetadataRequest GetConfigRequest GetCustomThemesRequest GetLogsRequest GetSessionsRequest GetSingleSessionRequest MachineInfoRequest RemoveSessionRequest UpdateConfigRequest UpdateSessionRequest CommandsMetadataResponse ConfigResponse ConfigUpdateResponse ErrorResponse LogsResponse MachineInfoResponse SessionCommandResponse SessionResponse SessionsResponse ThemesResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestId Gets or sets the request ID for tracking purposes public string RequestId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Utilities.ApplicationUtilities.html": {
    "href": "api/Jiro.Shared.Utilities.ApplicationUtilities.html",
    "title": "Class ApplicationUtilities | Jiro.Shared Documentation",
    "keywords": "Class ApplicationUtilities Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll Provides utility methods for application-level operations. public class ApplicationUtilities Inheritance object ApplicationUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsDebug() Checks if the application is running in debug mode. public static bool IsDebug() Returns bool"
  },
  "api/Jiro.Shared.Utilities.IPerformanceAnalyzer.html": {
    "href": "api/Jiro.Shared.Utilities.IPerformanceAnalyzer.html",
    "title": "Interface IPerformanceAnalyzer | Jiro.Shared Documentation",
    "keywords": "Interface IPerformanceAnalyzer Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll Defines a contract for system performance monitoring operations. public interface IPerformanceAnalyzer Methods GetApplicationMemoryUsagePercentageAsync() Gets the system memory usage as a percentage of total available memory. Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the memory usage as a percentage (0-100). GetApplicationMemoryUsedMBAsync() Gets the amount of memory currently used by the system in megabytes. Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the used memory in megabytes. GetAvailableMemoryMBAsync() Gets the available system memory in megabytes. Task<float> GetAvailableMemoryMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the available memory in megabytes. GetCpuUsageAsync() Gets the current CPU usage percentage. Task<float> GetCpuUsageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the CPU usage as a percentage (0-100)."
  },
  "api/Jiro.Shared.Utilities.PerformanceAnalyzerFactory.html": {
    "href": "api/Jiro.Shared.Utilities.PerformanceAnalyzerFactory.html",
    "title": "Class PerformanceAnalyzerFactory | Jiro.Shared Documentation",
    "keywords": "Class PerformanceAnalyzerFactory Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll Factory class for creating platform-specific performance analyzer instances. public static class PerformanceAnalyzerFactory Inheritance object PerformanceAnalyzerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() Creates a platform-specific performance analyzer instance. public static IPerformanceAnalyzer Create() Returns IPerformanceAnalyzer An IPerformanceAnalyzer implementation appropriate for the current operating system. Exceptions PlatformNotSupportedException Thrown when the current platform is not supported (only Windows and Linux are supported)."
  },
  "api/Jiro.Shared.Utilities.PerformanceAnalyzerLinux.html": {
    "href": "api/Jiro.Shared.Utilities.PerformanceAnalyzerLinux.html",
    "title": "Class PerformanceAnalyzerLinux | Jiro.Shared Documentation",
    "keywords": "Class PerformanceAnalyzerLinux Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll Linux-specific implementation of performance monitoring using /proc filesystem. public class PerformanceAnalyzerLinux : IPerformanceAnalyzer Inheritance object PerformanceAnalyzerLinux Implements IPerformanceAnalyzer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetApplicationMemoryUsagePercentageAsync() Gets the system memory usage as a percentage of total available memory by reading from /proc/meminfo. public Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the memory usage as a percentage (0-100). GetApplicationMemoryUsedMBAsync() Gets the amount of memory currently used by the system in megabytes by reading from /proc/meminfo. public Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the used memory in megabytes. GetAvailableMemoryMBAsync() Gets the available system memory in megabytes by reading from /proc/meminfo. public Task<float> GetAvailableMemoryMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the available memory in megabytes. GetCpuUsageAsync() Gets the current CPU usage percentage by reading from /proc/stat. public Task<float> GetCpuUsageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the CPU usage as a percentage (0-100)."
  },
  "api/Jiro.Shared.Utilities.PerformanceAnalyzerWindows.html": {
    "href": "api/Jiro.Shared.Utilities.PerformanceAnalyzerWindows.html",
    "title": "Class PerformanceAnalyzerWindows | Jiro.Shared Documentation",
    "keywords": "Class PerformanceAnalyzerWindows Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll Windows-specific implementation of performance monitoring using Windows Performance Counters. public class PerformanceAnalyzerWindows : IPerformanceAnalyzer Inheritance object PerformanceAnalyzerWindows Implements IPerformanceAnalyzer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceAnalyzerWindows() Initializes a new instance of the PerformanceAnalyzerWindows class. public PerformanceAnalyzerWindows() Exceptions PlatformNotSupportedException Thrown when attempting to use this class on a non-Windows platform. Methods GetApplicationMemoryUsagePercentageAsync() Gets the system memory usage as a percentage of total available memory using Windows Performance Counters. public Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the memory usage as a percentage (0-100). Exceptions InvalidOperationException Thrown when unable to determine total memory on Windows. GetApplicationMemoryUsedMBAsync() Gets the amount of memory currently used by the system in megabytes using Windows Performance Counters. public Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the used memory in megabytes. Exceptions InvalidOperationException Thrown when unable to determine memory usage on Windows. GetAvailableMemoryMBAsync() Gets the available system memory in megabytes using Windows Performance Counters. public Task<float> GetAvailableMemoryMBAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the available memory in megabytes. GetCpuUsageAsync() Gets the current CPU usage percentage using Windows Performance Counters. public Task<float> GetCpuUsageAsync() Returns Task<float> A task representing the asynchronous operation. The task result contains the CPU usage as a percentage (0-100)."
  },
  "api/Jiro.Shared.Utilities.StringModifier.html": {
    "href": "api/Jiro.Shared.Utilities.StringModifier.html",
    "title": "Class StringModifier | Jiro.Shared Documentation",
    "keywords": "Class StringModifier Namespace Jiro.Shared.Utilities Assembly Jiro.Shared.dll public class StringModifier Inheritance object StringModifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Anomify(string, int) public static string Anomify(string input, int anonimyPercentage = 50) Parameters input string anonimyPercentage int Returns string Chunkify(string, int) Splits the input string into chunks, each with at most maxLength characters. Words are kept intact (not broken in the middle). public static List<string> Chunkify(string input, int maxLength) Parameters input string The input string to split. maxLength int The maximum allowed length of each chunk. Returns List<string> A list of string chunks. CreateCacheKey(string, string) public static string CreateCacheKey(string category, string key) Parameters category string key string Returns string"
  },
  "api/Jiro.Shared.Utilities.html": {
    "href": "api/Jiro.Shared.Utilities.html",
    "title": "Namespace Jiro.Shared.Utilities | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Utilities Classes ApplicationUtilities Provides utility methods for application-level operations. PerformanceAnalyzerFactory Factory class for creating platform-specific performance analyzer instances. PerformanceAnalyzerLinux Linux-specific implementation of performance monitoring using /proc filesystem. PerformanceAnalyzerWindows Windows-specific implementation of performance monitoring using Windows Performance Counters. StringModifier Interfaces IPerformanceAnalyzer Defines a contract for system performance monitoring operations."
  },
  "api/Jiro.Shared.Websocket.Events.html": {
    "href": "api/Jiro.Shared.Websocket.Events.html",
    "title": "Class Events | Jiro.Shared Documentation",
    "keywords": "Class Events Namespace Jiro.Shared.Websocket Assembly Jiro.Shared.dll Defines constant event names used for WebSocket communication between Jiro clients and servers. These events represent client-to-server messages where the client is responding to or acknowledging server requests. public class Events Inheritance object Events Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CommandReceived Event fired when a client sends a command execution result back to the server. public const string CommandReceived = \"CommandReceived\" Field Value string CommandsMetadataRequested Event fired when a client responds with command metadata information. public const string CommandsMetadataRequested = \"CommandsMetadataRequested\" Field Value string ConfigRequested Event fired when a client responds with configuration details. public const string ConfigRequested = \"ConfigRequested\" Field Value string ConfigUpdated Event fired when a client confirms a configuration update. public const string ConfigUpdated = \"ConfigUpdated\" Field Value string CustomThemesRequested Event fired when a client responds with custom theme information. public const string CustomThemesRequested = \"CustomThemesRequested\" Field Value string LogsRequested Event fired when a client responds to a server's request for logs. public const string LogsRequested = \"LogsRequested\" Field Value string LogsStreamRequested Event fired when a client responds to a server's request for a log stream. public const string LogsStreamRequested = \"LogsStreamRequested\" Field Value string MachineInfoRequested Event fired when server requests machine information. public const string MachineInfoRequested = \"MachineInfoRequested\" Field Value string ReceiveLogsStream Event fired when a client sends logs stream to the server. public const string ReceiveLogsStream = \"ReceiveLogsStream\" Field Value string ReceiveSessionMessagesStream Event fired when a client sends session messages stream to the server. public const string ReceiveSessionMessagesStream = \"ReceiveSessionMessagesStream\" Field Value string Reconnected Event fired when a client successfully reconnects to the server. public const string Reconnected = \"Reconnected\" Field Value string RemoveSessionRequested Event fired when a client removes a session. public const string RemoveSessionRequested = \"RemoveSession\" Field Value string SessionMessagesStreamRequested Event fired when a client responds with a list of all available sessions. public const string SessionMessagesStreamRequested = \"SessionMessagesStreamRequested\" Field Value string SessionsRequested Event fired when a client responds with a list of all available sessions. public const string SessionsRequested = \"SessionsRequested\" Field Value string SingleSessionRequested Event fired when a client responds with session details for a specific session. public const string SingleSessionRequested = \"SingleSessionRequested\" Field Value string StreamChatMessagesRequested Event fired when server requests client to stream chat messages. public const string StreamChatMessagesRequested = \"StreamChatMessagesRequested\" Field Value string StreamChatMessagesToServer Event fired when client streams chat messages to the server. public const string StreamChatMessagesToServer = \"StreamChatMessagesToServer\" Field Value string StreamWordsRequested Event fired when server requests client to stream words. public const string StreamWordsRequested = \"StreamWordsRequested\" Field Value string StreamWordsToServer Event fired when client streams word-by-word message content to the server. public const string StreamWordsToServer = \"StreamWordsToServer\" Field Value string UpdateSessionRequested Event fired when a client updates a session. public const string UpdateSessionRequested = \"UpdateSession\" Field Value string"
  },
  "api/Jiro.Shared.Websocket.IJiroHubClient.html": {
    "href": "api/Jiro.Shared.Websocket.IJiroHubClient.html",
    "title": "Interface IJiroHubClient | Jiro.Shared Documentation",
    "keywords": "Interface IJiroHubClient Namespace Jiro.Shared.Websocket Assembly Jiro.Shared.dll Interface for server-to-client events. Used by the server to push events to connected clients. public interface IJiroHubClient Methods GetMachineInfoAsync(MachineInfoRequest) Requests machine information from the client instance [HubMethodName(\"MachineInfoRequested\")] Task<MachineInfoResponse> GetMachineInfoAsync(MachineInfoRequest request) Parameters request MachineInfoRequest Returns Task<MachineInfoResponse> RemoveSessionAsync(RemoveSessionRequest) Removes a session from the client instance [HubMethodName(\"RemoveSession\")] Task<ActionResult> RemoveSessionAsync(RemoveSessionRequest sessionRequest) Parameters sessionRequest RemoveSessionRequest Returns Task<ActionResult> RequestChatMessagesStreamAsync(StreamChatRequest) Requests the client to start streaming chat messages to the server [HubMethodName(\"StreamChatMessagesRequested\")] Task<ActionResult> RequestChatMessagesStreamAsync(StreamChatRequest request) Parameters request StreamChatRequest Returns Task<ActionResult> RequestCommandsMetadataAsync(GetCommandsMetadataRequest) Requests commands metadata from the client instance [HubMethodName(\"CommandsMetadataRequested\")] Task<CommandsMetadataResponse> RequestCommandsMetadataAsync(GetCommandsMetadataRequest request) Parameters request GetCommandsMetadataRequest Returns Task<CommandsMetadataResponse> RequestConfigAsync(GetConfigRequest) Requests configuration from the client instance [HubMethodName(\"ConfigRequested\")] Task<ConfigResponse> RequestConfigAsync(GetConfigRequest request) Parameters request GetConfigRequest Returns Task<ConfigResponse> RequestCustomThemesAsync(GetCustomThemesRequest) Requests custom themes from the client instance [HubMethodName(\"CustomThemesRequested\")] Task<ThemesResponse> RequestCustomThemesAsync(GetCustomThemesRequest request) Parameters request GetCustomThemesRequest Returns Task<ThemesResponse> RequestLogsAsync(GetLogsRequest) Requests logs from the client instance [HubMethodName(\"LogsRequested\")] Task<LogsResponse> RequestLogsAsync(GetLogsRequest request) Parameters request GetLogsRequest Returns Task<LogsResponse> RequestLogsStreamAsync(GetLogsRequest) Requests logs stream from the client instance [HubMethodName(\"LogsStreamRequested\")] Task<ActionResult> RequestLogsStreamAsync(GetLogsRequest request) Parameters request GetLogsRequest Returns Task<ActionResult> RequestSessionMessagesStreamAsync(GetSingleSessionRequest) Requests a stream of messages for a specific session from the client instance [HubMethodName(\"SessionMessagesStreamRequested\")] Task<ActionResult> RequestSessionMessagesStreamAsync(GetSingleSessionRequest request) Parameters request GetSingleSessionRequest Returns Task<ActionResult> RequestSessionsAsync(GetSessionsRequest) Requests all sessions from the client instance [HubMethodName(\"SessionsRequested\")] Task<SessionsResponse> RequestSessionsAsync(GetSessionsRequest request) Parameters request GetSessionsRequest Returns Task<SessionsResponse> RequestSingleSessionAsync(GetSingleSessionRequest) Requests a specific session from the client instance [HubMethodName(\"SingleSessionRequested\")] Task<SessionResponse> RequestSingleSessionAsync(GetSingleSessionRequest request) Parameters request GetSingleSessionRequest Returns Task<SessionResponse> RequestWordStreamAsync(StreamWordRequest) Requests the client to start streaming word-by-word message content to the server [HubMethodName(\"StreamWordsRequested\")] Task<ActionResult> RequestWordStreamAsync(StreamWordRequest request) Parameters request StreamWordRequest Returns Task<ActionResult> SendCommandAsync(CommandMessage) Sends a command to the client instance [HubMethodName(\"CommandReceived\")] Task<ActionResult> SendCommandAsync(CommandMessage commandMessage) Parameters commandMessage CommandMessage Returns Task<ActionResult> UpdateConfigAsync(UpdateConfigRequest) Sends a configuration update to the client instance [HubMethodName(\"ConfigUpdated\")] Task<ConfigUpdateResponse> UpdateConfigAsync(UpdateConfigRequest request) Parameters request UpdateConfigRequest Returns Task<ConfigUpdateResponse> UpdateSessionAsync(UpdateSessionRequest) Updates a session with the provided session update message [HubMethodName(\"UpdateSession\")] Task<ActionResult> UpdateSessionAsync(UpdateSessionRequest sessionUpdateMessage) Parameters sessionUpdateMessage UpdateSessionRequest Returns Task<ActionResult>"
  },
  "api/Jiro.Shared.Websocket.IJiroHubServer.html": {
    "href": "api/Jiro.Shared.Websocket.IJiroHubServer.html",
    "title": "Interface IJiroHubServer | Jiro.Shared Documentation",
    "keywords": "Interface IJiroHubServer Namespace Jiro.Shared.Websocket Assembly Jiro.Shared.dll Interface for client-to-server events. Used by server to handle events from connected clients. public interface IJiroHubServer Methods ReceiveChatMessagesStreamAsync(string, ChannelReader<ChatMessage>) Receives chat messages stream from the client instance [HubMethodName(\"StreamChatMessagesToServer\")] Task ReceiveChatMessagesStreamAsync(string requestId, ChannelReader<ChatMessage> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<ChatMessage> The channel reader containing chat messages from the client Returns Task A task indicating the completion of the operation ReceiveLogsStreamAsync(string, ChannelReader<LogEntry>) Receives logs stream from the client instance [HubMethodName(\"ReceiveLogsStream\")] Task ReceiveLogsStreamAsync(string requestId, ChannelReader<LogEntry> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<LogEntry> The channel reader containing log entries from the client Returns Task An ActionResult indicating the success or failure of the operation ReceiveSessionMessagesStreamAsync(string, ChannelReader<ChatMessage>) Receives session messages stream from the client instance [HubMethodName(\"ReceiveSessionMessagesStream\")] Task ReceiveSessionMessagesStreamAsync(string requestId, ChannelReader<ChatMessage> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<ChatMessage> The channel reader containing chat messages from the client Returns Task An ActionResult indicating the success or failure of the operation ReceiveWordStreamAsync(string, ChannelReader<WordUpdate>) Receives word-by-word message content stream from the client instance [HubMethodName(\"StreamWordsToServer\")] Task ReceiveWordStreamAsync(string requestId, ChannelReader<WordUpdate> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<WordUpdate> The channel reader containing word updates from the client Returns Task A task indicating the completion of the operation"
  },
  "api/Jiro.Shared.Websocket.IJiroInstance.html": {
    "href": "api/Jiro.Shared.Websocket.IJiroInstance.html",
    "title": "Interface IJiroInstance | Jiro.Shared Documentation",
    "keywords": "Interface IJiroInstance Namespace Jiro.Shared.Websocket Assembly Jiro.Shared.dll Interface for the Jiro client implementation. Defines events received from the server and methods to send responses. public interface IJiroInstance Methods ReceiveLogsStreamAsync(string, ChannelReader<LogEntry>) Sends logs stream to the server Task ReceiveLogsStreamAsync(string requestId, ChannelReader<LogEntry> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<LogEntry> The channel reader containing log entries to send Returns Task ReceiveSessionMessagesStreamAsync(string, ChannelReader<ChatMessage>) Sends session messages stream to the server Task ReceiveSessionMessagesStreamAsync(string requestId, ChannelReader<ChatMessage> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<ChatMessage> The channel reader containing chat messages to send Returns Task SetupEvents() Sets up the events for the client connection void SetupEvents() Events Closed Event fired when connection is closed event Func<Exception?, Task>? Closed Event Type Func<Exception, Task> CommandReceived Event fired when a command is received from the server event Func<CommandMessage, Task<ActionResult>>? CommandReceived Event Type Func<CommandMessage, Task<ActionResult>> CommandsMetadataRequested Event fired when a commands metadata request is received from the server event Func<GetCommandsMetadataRequest, Task<CommandsMetadataResponse>>? CommandsMetadataRequested Event Type Func<GetCommandsMetadataRequest, Task<CommandsMetadataResponse>> ConfigRequested Event fired when a config request is received from the server event Func<GetConfigRequest, Task<ConfigResponse>>? ConfigRequested Event Type Func<GetConfigRequest, Task<ConfigResponse>> ConfigUpdateRequested Event fired when a config update request is received from the server event Func<UpdateConfigRequest, Task<ConfigResponse>>? ConfigUpdateRequested Event Type Func<UpdateConfigRequest, Task<ConfigResponse>> CustomThemesRequested Event fired when a custom themes request is received from the server event Func<GetCustomThemesRequest, Task<ThemesResponse>>? CustomThemesRequested Event Type Func<GetCustomThemesRequest, Task<ThemesResponse>> LogsRequested Event fired when a logs request is received from the server event Func<GetLogsRequest, Task<LogsResponse>>? LogsRequested Event Type Func<GetLogsRequest, Task<LogsResponse>> LogsStreamRequested Event fired when a logs stream request is received from the server event Func<GetLogsRequest, Task<ActionResult>>? LogsStreamRequested Event Type Func<GetLogsRequest, Task<ActionResult>> MachineInfoRequested Event fired when a machine info request is received from the server event Func<MachineInfoRequest, Task<MachineInfoResponse>>? MachineInfoRequested Event Type Func<MachineInfoRequest, Task<MachineInfoResponse>> Reconnected Event fired when connection is reconnected event Func<string?, Task>? Reconnected Event Type Func<string, Task> Reconnecting Event fired when connection is reconnecting event Func<Exception?, Task>? Reconnecting Event Type Func<Exception, Task> RemoveSessionRequested Event fired when a remove session request is received from the server event Func<RemoveSessionRequest, Task<ActionResult>>? RemoveSessionRequested Event Type Func<RemoveSessionRequest, Task<ActionResult>> SessionMessagesStreamRequested Event fired when a session messages stream request is received from the server event Func<GetSingleSessionRequest, Task<ActionResult>>? SessionMessagesStreamRequested Event Type Func<GetSingleSessionRequest, Task<ActionResult>> SessionRequested Event fired when a session request is received from the server event Func<GetSingleSessionRequest, Task<SessionResponse>>? SessionRequested Event Type Func<GetSingleSessionRequest, Task<SessionResponse>> SessionsRequested Event fired when a sessions request is received from the server event Func<GetSessionsRequest, Task<SessionsResponse>>? SessionsRequested Event Type Func<GetSessionsRequest, Task<SessionsResponse>> UpdateSessionRequested Event fired when an update session request is received from the server event Func<UpdateSessionRequest, Task<ActionResult>>? UpdateSessionRequested Event Type Func<UpdateSessionRequest, Task<ActionResult>>"
  },
  "api/Jiro.Shared.Websocket.JiroInstanceBase.html": {
    "href": "api/Jiro.Shared.Websocket.JiroInstanceBase.html",
    "title": "Class JiroInstanceBase | Jiro.Shared Documentation",
    "keywords": "Class JiroInstanceBase Namespace Jiro.Shared.Websocket Assembly Jiro.Shared.dll Base class for Jiro client implementations. Provides automatic event wiring for SignalR hub connections. public abstract class JiroInstanceBase : IJiroInstance Inheritance object JiroInstanceBase Implements IJiroInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JiroInstanceBase(HubConnection?, ILogger<JiroInstanceBase>?) Creates a new instance of JiroClientBase protected JiroInstanceBase(HubConnection? hubConnection = null, ILogger<JiroInstanceBase>? logger = null) Parameters hubConnection HubConnection The SignalR hub connection to use logger ILogger<JiroInstanceBase> Optional logger instance Fields _connectionSemaphore Semaphore for connection synchronization protected readonly SemaphoreSlim _connectionSemaphore Field Value SemaphoreSlim _hubConnection The SignalR hub connection used for communication protected HubConnection _hubConnection Field Value HubConnection _logger Logger instance for logging events protected ILogger<JiroInstanceBase>? _logger Field Value ILogger<JiroInstanceBase> Methods CleanupAsync() Override this method to implement custom cleanup logic. This method is called when the client is being disposed or disconnected to perform any necessary cleanup operations. protected virtual Task CleanupAsync() Returns Task A task representing the asynchronous cleanup operation InitializeAsync(string?, string?, Action<Exception, string>?, CancellationToken) Initializes the WebSocket connection with proper setup and error handling public virtual Task InitializeAsync(string? hubUrl = null, string? apiKey = null, Action<Exception, string>? exceptionHandler = null, CancellationToken cancellationToken = default) Parameters hubUrl string The URL of the hub to connect to apiKey string The API key for authentication exceptionHandler Action<Exception, string> Optional exception handler for connection errors cancellationToken CancellationToken Cancellation token for the operation Returns Task ReceiveLogsStreamAsync(string, ChannelReader<LogEntry>) Sends logs stream to the server public virtual Task ReceiveLogsStreamAsync(string requestId, ChannelReader<LogEntry> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<LogEntry> The channel reader containing log entries to send Returns Task ReceiveSessionMessagesStreamAsync(string, ChannelReader<ChatMessage>) Sends session messages stream to the server public virtual Task ReceiveSessionMessagesStreamAsync(string requestId, ChannelReader<ChatMessage> stream) Parameters requestId string The unique identifier for this stream request stream ChannelReader<ChatMessage> The channel reader containing chat messages to send Returns Task SetupEvents() Sets up the events for the WebSocket connection. This method is called after the connection is established to ensure all events are ready to be invoked. It should be called after the connection is started to ensure the events are properly registered and can be invoked when the corresponding events occur. public virtual void SetupEvents() SetupHandlers() Override this method to implement custom event handlers for the client. This method is called after the WebSocket connection is established to set up application-specific event handling logic. protected abstract void SetupHandlers() Events Closed Event fired when connection is closed public event Func<Exception?, Task>? Closed Event Type Func<Exception, Task> CommandReceived Event fired when a command is received from the server public event Func<CommandMessage, Task<ActionResult>>? CommandReceived Event Type Func<CommandMessage, Task<ActionResult>> CommandsMetadataRequested Event fired when a commands metadata request is received from the server public event Func<GetCommandsMetadataRequest, Task<CommandsMetadataResponse>>? CommandsMetadataRequested Event Type Func<GetCommandsMetadataRequest, Task<CommandsMetadataResponse>> ConfigRequested Event fired when a config request is received from the server public event Func<GetConfigRequest, Task<ConfigResponse>>? ConfigRequested Event Type Func<GetConfigRequest, Task<ConfigResponse>> ConfigUpdateRequested Event fired when a config update request is received from the server public event Func<UpdateConfigRequest, Task<ConfigResponse>>? ConfigUpdateRequested Event Type Func<UpdateConfigRequest, Task<ConfigResponse>> CustomThemesRequested Event fired when a custom themes request is received from the server public event Func<GetCustomThemesRequest, Task<ThemesResponse>>? CustomThemesRequested Event Type Func<GetCustomThemesRequest, Task<ThemesResponse>> LogsRequested Event fired when a logs request is received from the server public event Func<GetLogsRequest, Task<LogsResponse>>? LogsRequested Event Type Func<GetLogsRequest, Task<LogsResponse>> LogsStreamRequested Event fired when a logs stream request is received from the server public event Func<GetLogsRequest, Task<ActionResult>>? LogsStreamRequested Event Type Func<GetLogsRequest, Task<ActionResult>> MachineInfoRequested Event fired when a machine info request is received from the server public event Func<MachineInfoRequest, Task<MachineInfoResponse>>? MachineInfoRequested Event Type Func<MachineInfoRequest, Task<MachineInfoResponse>> Reconnected Event fired when connection is reconnected public event Func<string?, Task>? Reconnected Event Type Func<string, Task> Reconnecting Event fired when connection is reconnecting public event Func<Exception?, Task>? Reconnecting Event Type Func<Exception, Task> RemoveSessionRequested Event fired when a remove session request is received from the server public event Func<RemoveSessionRequest, Task<ActionResult>>? RemoveSessionRequested Event Type Func<RemoveSessionRequest, Task<ActionResult>> SessionMessagesStreamRequested Event fired when a session messages stream request is received from the server public event Func<GetSingleSessionRequest, Task<ActionResult>>? SessionMessagesStreamRequested Event Type Func<GetSingleSessionRequest, Task<ActionResult>> SessionRequested Event fired when a session request is received from the server public event Func<GetSingleSessionRequest, Task<SessionResponse>>? SessionRequested Event Type Func<GetSingleSessionRequest, Task<SessionResponse>> SessionsRequested Event fired when a sessions request is received from the server public event Func<GetSessionsRequest, Task<SessionsResponse>>? SessionsRequested Event Type Func<GetSessionsRequest, Task<SessionsResponse>> UpdateSessionRequested Event fired when an update session request is received from the server public event Func<UpdateSessionRequest, Task<ActionResult>>? UpdateSessionRequested Event Type Func<UpdateSessionRequest, Task<ActionResult>>"
  },
  "api/Jiro.Shared.Websocket.Requests.ActionResult.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.ActionResult.html",
    "title": "Class ActionResult | Jiro.Shared Documentation",
    "keywords": "Class ActionResult Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents the result of an action performed by a client, providing acknowledgment of whether the operation succeeded or failed along with relevant details. public class ActionResult : TrackedObject Inheritance object TrackedObject ActionResult Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Errors Gets or sets an array of error messages if the action failed. This property is empty when the action succeeds. public string[] Errors { get; set; } Property Value string[] IsSuccess Gets or sets a value indicating whether the action was successful. public bool IsSuccess { get; set; } Property Value bool Message Gets or sets a message describing the result of the action. This can contain success confirmation or error details. public string Message { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.CommandMessage.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.CommandMessage.html",
    "title": "Class CommandMessage | Jiro.Shared Documentation",
    "keywords": "Class CommandMessage Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a command message received via WebSocket public class CommandMessage Inheritance object CommandMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command The command to execute [JsonPropertyName(\"command\")] public string Command { get; set; } Property Value string CommandSyncId The unique synchronization ID for the command [JsonPropertyName(\"commandSyncId\")] public string CommandSyncId { get; set; } Property Value string InstanceId The unique identifier of the instance [JsonPropertyName(\"instanceId\")] public string InstanceId { get; set; } Property Value string Parameters Parameters for the command [JsonPropertyName(\"parameters\")] public Dictionary<string, string> Parameters { get; set; } Property Value Dictionary<string, string> SessionId The session ID associated with the command [JsonPropertyName(\"sessionId\")] public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.CommandMetadata.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.CommandMetadata.html",
    "title": "Class CommandMetadata | Jiro.Shared Documentation",
    "keywords": "Class CommandMetadata Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents metadata for a command. public class CommandMetadata Inheritance object CommandMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandDescription Gets or sets the description of the command. public string CommandDescription { get; set; } Property Value string CommandName Gets or sets the name of the command. public string CommandName { get; set; } Property Value string CommandSyntax Gets or sets the syntax of the command. public string CommandSyntax { get; set; } Property Value string Keywords Gets or sets the keywords associated with the command. public string[] Keywords { get; set; } Property Value string[] ModuleName Gets or sets the name of the module containing the command. public string ModuleName { get; set; } Property Value string Parameters Gets or sets the parameters of the command. public Dictionary<string, string> Parameters { get; set; } Property Value Dictionary<string, string>"
  },
  "api/Jiro.Shared.Websocket.Requests.ConfigurationSection.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.ConfigurationSection.html",
    "title": "Class ConfigurationSection | Jiro.Shared Documentation",
    "keywords": "Class ConfigurationSection Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents configuration section information. public class ConfigurationSection Inheritance object ConfigurationSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Values Gets or sets the configuration values. public Dictionary<string, string> Values { get; set; } Property Value Dictionary<string, string>"
  },
  "api/Jiro.Shared.Websocket.Requests.GetCommandsMetadataRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetCommandsMetadataRequest.html",
    "title": "Class GetCommandsMetadataRequest | Jiro.Shared Documentation",
    "keywords": "Class GetCommandsMetadataRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get commands metadata from the instance public class GetCommandsMetadataRequest : TrackedObject Inheritance object TrackedObject GetCommandsMetadataRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Jiro.Shared.Websocket.Requests.GetConfigRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetConfigRequest.html",
    "title": "Class GetConfigRequest | Jiro.Shared Documentation",
    "keywords": "Class GetConfigRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get configuration from the instance public class GetConfigRequest : TrackedObject Inheritance object TrackedObject GetConfigRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Jiro.Shared.Websocket.Requests.GetCustomThemesRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetCustomThemesRequest.html",
    "title": "Class GetCustomThemesRequest | Jiro.Shared Documentation",
    "keywords": "Class GetCustomThemesRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get custom themes from the instance public class GetCustomThemesRequest : TrackedObject Inheritance object TrackedObject GetCustomThemesRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Jiro.Shared.Websocket.Requests.GetLogsRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetLogsRequest.html",
    "title": "Class GetLogsRequest | Jiro.Shared Documentation",
    "keywords": "Class GetLogsRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get logs from the instance public class GetLogsRequest : TrackedObject Inheritance object TrackedObject GetLogsRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Level Gets or sets the log level filter (optional) public string? Level { get; set; } Property Value string Limit Gets or sets the maximum number of logs to retrieve (optional, defaults to 100) public int? Limit { get; set; } Property Value int? Offset Gets or sets the starting point for log retrieval (optional, defaults to 0) public int? Offset { get; set; } Property Value int?"
  },
  "api/Jiro.Shared.Websocket.Requests.GetSessionsRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetSessionsRequest.html",
    "title": "Class GetSessionsRequest | Jiro.Shared Documentation",
    "keywords": "Class GetSessionsRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get all sessions from the instance public class GetSessionsRequest : TrackedObject Inheritance object TrackedObject GetSessionsRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InstanceId Gets or sets the instance ID to retrieve sessions for public string InstanceId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.GetSingleSessionRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.GetSingleSessionRequest.html",
    "title": "Class GetSingleSessionRequest | Jiro.Shared Documentation",
    "keywords": "Class GetSingleSessionRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get a specific session from the instance public class GetSingleSessionRequest : TrackedObject Inheritance object TrackedObject GetSingleSessionRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IncludeMessages Gets or sets whether to include messages in the session response public bool IncludeMessages { get; set; } Property Value bool InstanceId Gets or sets the instance ID public string InstanceId { get; set; } Property Value string SessionId Gets or sets the session ID public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.LogEntry.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.LogEntry.html",
    "title": "Class LogEntry | Jiro.Shared Documentation",
    "keywords": "Class LogEntry Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a log entry. public class LogEntry Inheritance object LogEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties File Gets or sets the file name of the log. public string File { get; set; } Property Value string Level Gets or sets the log level. public string Level { get; set; } Property Value string Message Gets or sets the log message. public string Message { get; set; } Property Value string Timestamp Gets or sets the timestamp of the log entry. public string Timestamp { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.MachineInfoRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.MachineInfoRequest.html",
    "title": "Class MachineInfoRequest | Jiro.Shared Documentation",
    "keywords": "Class MachineInfoRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to get machine information from the instance public class MachineInfoRequest : TrackedObject Inheritance object TrackedObject MachineInfoRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Filters Gets or sets the filters to apply when retrieving machine information. public Dictionary<string, string> Filters { get; set; } Property Value Dictionary<string, string>"
  },
  "api/Jiro.Shared.Websocket.Requests.RemoveSessionRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.RemoveSessionRequest.html",
    "title": "Class RemoveSessionRequest | Jiro.Shared Documentation",
    "keywords": "Class RemoveSessionRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to remove a session. public class RemoveSessionRequest : TrackedObject Inheritance object TrackedObject RemoveSessionRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Reason Gets or sets the reason for removing the session. public string? Reason { get; set; } Property Value string SessionId Gets or sets the unique identifier for the session to be removed. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.StreamChatRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.StreamChatRequest.html",
    "title": "Class StreamChatRequest | Jiro.Shared Documentation",
    "keywords": "Class StreamChatRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Request to start streaming chat messages. public class StreamChatRequest Inheritance object StreamChatRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BufferSize Gets or sets the buffer size for the stream. public int BufferSize { get; set; } Property Value int RequestId Gets or sets the unique identifier for this stream request. public string RequestId { get; set; } Property Value string SessionId Gets or sets the session ID for the chat stream. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.StreamWordRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.StreamWordRequest.html",
    "title": "Class StreamWordRequest | Jiro.Shared Documentation",
    "keywords": "Class StreamWordRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Request to start streaming word-by-word message content from client to server. public class StreamWordRequest Inheritance object StreamWordRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BufferSize Gets or sets the buffer size for the stream. public int BufferSize { get; set; } Property Value int MessageId Gets or sets the message ID to stream. public string MessageId { get; set; } Property Value string RequestId Gets or sets the unique identifier for this stream request. public string RequestId { get; set; } Property Value string SessionId Gets or sets the session ID. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.SystemInfo.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.SystemInfo.html",
    "title": "Class SystemInfo | Jiro.Shared Documentation",
    "keywords": "Class SystemInfo Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents system information. public class SystemInfo Inheritance object SystemInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MachineName Gets or sets the machine name. public string MachineName { get; set; } Property Value string OperatingSystem Gets or sets the operating system. public string OperatingSystem { get; set; } Property Value string ProcessorCount Gets or sets the processor count. public int ProcessorCount { get; set; } Property Value int RuntimeVersion Gets or sets the .NET runtime version. public string RuntimeVersion { get; set; } Property Value string TotalMemory Gets or sets the total memory in bytes. public long TotalMemory { get; set; } Property Value long"
  },
  "api/Jiro.Shared.Websocket.Requests.Theme.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.Theme.html",
    "title": "Class Theme | Jiro.Shared Documentation",
    "keywords": "Class Theme Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a theme. public class Theme Inheritance object Theme Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the theme description. public string Description { get; set; } Property Value string JsonColorScheme Gets or sets the theme color scheme. public string JsonColorScheme { get; set; } Property Value string Name Gets or sets the theme name. public string Name { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.UpdateConfigRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.UpdateConfigRequest.html",
    "title": "Class UpdateConfigRequest | Jiro.Shared Documentation",
    "keywords": "Class UpdateConfigRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to update configuration on the instance public class UpdateConfigRequest : TrackedObject Inheritance object TrackedObject UpdateConfigRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConfigData Gets or sets the configuration data to update public object ConfigData { get; set; } Property Value object"
  },
  "api/Jiro.Shared.Websocket.Requests.UpdateSessionRequest.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.UpdateSessionRequest.html",
    "title": "Class UpdateSessionRequest | Jiro.Shared Documentation",
    "keywords": "Class UpdateSessionRequest Namespace Jiro.Shared.Websocket.Requests Assembly Jiro.Shared.dll Represents a request to update a session. public class UpdateSessionRequest : TrackedObject Inheritance object TrackedObject UpdateSessionRequest Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the updated description for the session. public string? Description { get; set; } Property Value string Name Gets or sets the updated name for the session. public string? Name { get; set; } Property Value string SessionId Gets or sets the unique identifier for the session to be updated. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Requests.html": {
    "href": "api/Jiro.Shared.Websocket.Requests.html",
    "title": "Namespace Jiro.Shared.Websocket.Requests | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Websocket.Requests Classes ActionResult Represents the result of an action performed by a client, providing acknowledgment of whether the operation succeeded or failed along with relevant details. CommandMessage Represents a command message received via WebSocket CommandMetadata Represents metadata for a command. ConfigurationSection Represents configuration section information. GetCommandsMetadataRequest Represents a request to get commands metadata from the instance GetConfigRequest Represents a request to get configuration from the instance GetCustomThemesRequest Represents a request to get custom themes from the instance GetLogsRequest Represents a request to get logs from the instance GetSessionsRequest Represents a request to get all sessions from the instance GetSingleSessionRequest Represents a request to get a specific session from the instance LogEntry Represents a log entry. MachineInfoRequest Represents a request to get machine information from the instance RemoveSessionRequest Represents a request to remove a session. StreamChatRequest Request to start streaming chat messages. StreamWordRequest Request to start streaming word-by-word message content from client to server. SystemInfo Represents system information. Theme Represents a theme. UpdateConfigRequest Represents a request to update configuration on the instance UpdateSessionRequest Represents a request to update a session."
  },
  "api/Jiro.Shared.Websocket.Responses.ChatMessage.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ChatMessage.html",
    "title": "Class ChatMessage | Jiro.Shared Documentation",
    "keywords": "Class ChatMessage Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents a chat message in the session response. public class ChatMessage Inheritance object ChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content Gets or sets the message content. public string Content { get; set; } Property Value string CreatedAt Gets or sets the timestamp of the message creation. public DateTime CreatedAt { get; set; } Property Value DateTime IsUser Gets or sets whether the message is from a user. public bool IsUser { get; set; } Property Value bool MessageId Gets or sets the message ID. public string MessageId { get; set; } Property Value string Type Gets or sets the message type. public string Type { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.ChatSession.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ChatSession.html",
    "title": "Class ChatSession | Jiro.Shared Documentation",
    "keywords": "Class ChatSession Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents a chat session. public class ChatSession Inheritance object ChatSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the timestamp of the session creation. public DateTime CreatedAt { get; set; } Property Value DateTime SessionId Gets or sets the session ID. public string SessionId { get; set; } Property Value string SessionName Gets or sets the session name. public string SessionName { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.CommandsMetadataResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.CommandsMetadataResponse.html",
    "title": "Class CommandsMetadataResponse | Jiro.Shared Documentation",
    "keywords": "Class CommandsMetadataResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for commands metadata. public class CommandsMetadataResponse : TrackedObject Inheritance object TrackedObject CommandsMetadataResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Commands Gets or sets the list of command metadata. public List<CommandMetadata> Commands { get; set; } Property Value List<CommandMetadata>"
  },
  "api/Jiro.Shared.Websocket.Responses.ConfigResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ConfigResponse.html",
    "title": "Class ConfigResponse | Jiro.Shared Documentation",
    "keywords": "Class ConfigResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for configuration. public class ConfigResponse : TrackedObject Inheritance object TrackedObject ConfigResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationName Gets or sets the application name. public string ApplicationName { get; set; } Property Value string Configuration Gets or sets the configuration section. public ConfigurationSection Configuration { get; set; } Property Value ConfigurationSection Environment Gets or sets the environment. public string Environment { get; set; } Property Value string InstanceId Gets or sets the instance ID. public string InstanceId { get; set; } Property Value string SystemInfo Gets or sets the system information. public SystemInfo SystemInfo { get; set; } Property Value SystemInfo UptimeSeconds Gets or sets the uptime in seconds. public double UptimeSeconds { get; set; } Property Value double Version Gets or sets the version. public string? Version { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.ConfigUpdateResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ConfigUpdateResponse.html",
    "title": "Class ConfigUpdateResponse | Jiro.Shared Documentation",
    "keywords": "Class ConfigUpdateResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for configuration updates. public class ConfigUpdateResponse : TrackedObject Inheritance object TrackedObject ConfigUpdateResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets or sets the message associated with the update. public string Message { get; set; } Property Value string Note Gets or sets additional notes regarding the update. public string Note { get; set; } Property Value string ReceivedKeys Gets or sets the keys received during the update. public string[] ReceivedKeys { get; set; } Property Value string[] Success Gets or sets a value indicating whether the update was successful. public bool Success { get; set; } Property Value bool"
  },
  "api/Jiro.Shared.Websocket.Responses.ErrorResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ErrorResponse.html",
    "title": "Class ErrorResponse | Jiro.Shared Documentation",
    "keywords": "Class ErrorResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for errors. public class ErrorResponse : TrackedObject Inheritance object TrackedObject ErrorResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandName Gets or sets the command name associated with the error. public string CommandName { get; set; } Property Value string ErrorMessage Gets or sets the error message. public string ErrorMessage { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.LogsResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.LogsResponse.html",
    "title": "Class LogsResponse | Jiro.Shared Documentation",
    "keywords": "Class LogsResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for logs. public class LogsResponse : TrackedObject Inheritance object TrackedObject LogsResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Level Gets or sets the log level. public string Level { get; set; } Property Value string Limit Gets or sets the limit of logs. public int Limit { get; set; } Property Value int Logs Gets or sets the list of logs. public List<LogEntry> Logs { get; set; } Property Value List<LogEntry> TotalLogs Gets or sets the total number of logs. public int TotalLogs { get; set; } Property Value int"
  },
  "api/Jiro.Shared.Websocket.Responses.MachineInfoResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.MachineInfoResponse.html",
    "title": "Class MachineInfoResponse | Jiro.Shared Documentation",
    "keywords": "Class MachineInfoResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll public class MachineInfoResponse : TrackedObject Inheritance object TrackedObject MachineInfoResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the description of the machine. public string Description { get; set; } Property Value string MachineId Gets or sets the unique identifier for the machine. public string MachineId { get; set; } Property Value string Metadata Gets or sets the metadata associated with the machine. This can include additional information such as hardware specifications, software versions, etc. public Dictionary<string, string> Metadata { get; set; } Property Value Dictionary<string, string> Name Gets or sets the name of the machine. public string Name { get; set; } Property Value string Status Gets or sets the status of the machine. public string Status { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.SessionCommandResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.SessionCommandResponse.html",
    "title": "Class SessionCommandResponse | Jiro.Shared Documentation",
    "keywords": "Class SessionCommandResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents a command execution response with tracking information. public class SessionCommandResponse : TrackedObject Inheritance object TrackedObject SessionCommandResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandName Gets or sets the name of the executed command. public string CommandName { get; set; } Property Value string CommandType Gets or sets the type of command result as a string. Applications should use their own CommandType enum for type safety. public string CommandType { get; set; } Property Value string IsSuccess Gets or sets whether the command executed successfully. public bool IsSuccess { get; set; } Property Value bool Result Gets or sets the command result data. Applications should cast this to their specific ICommandResult implementation. public object? Result { get; set; } Property Value object SynchronizationToken Gets or sets the synchronization token containing instance and session information. public SynchronizationToken SynchronizationToken { get; set; } Property Value SynchronizationToken"
  },
  "api/Jiro.Shared.Websocket.Responses.SessionResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.SessionResponse.html",
    "title": "Class SessionResponse | Jiro.Shared Documentation",
    "keywords": "Class SessionResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for a single session with messages. public class SessionResponse : TrackedObject Inheritance object TrackedObject SessionResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the timestamp of the session creation. public DateTime CreatedAt { get; set; } Property Value DateTime InstanceId Gets or sets the instance ID. public string InstanceId { get; set; } Property Value string LastUpdatedAt Gets or sets the timestamp of the last update. public DateTime LastUpdatedAt { get; set; } Property Value DateTime Messages Gets or sets the list of messages in the session. public List<ChatMessage> Messages { get; set; } Property Value List<ChatMessage> SessionId Gets or sets the session ID. public string SessionId { get; set; } Property Value string SessionName Gets or sets the session name. public string SessionName { get; set; } Property Value string TotalMessages Gets or sets the total number of messages in the session. public int TotalMessages { get; set; } Property Value int"
  },
  "api/Jiro.Shared.Websocket.Responses.SessionsResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.SessionsResponse.html",
    "title": "Class SessionsResponse | Jiro.Shared Documentation",
    "keywords": "Class SessionsResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for sessions. public class SessionsResponse : TrackedObject Inheritance object TrackedObject SessionsResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentSessionId Gets or sets the current session ID. public string? CurrentSessionId { get; set; } Property Value string InstanceId Gets or sets the instance ID. public string InstanceId { get; set; } Property Value string Sessions Gets or sets the list of sessions. public List<ChatSession> Sessions { get; set; } Property Value List<ChatSession> TotalSessions Gets or sets the total number of sessions. public int TotalSessions { get; set; } Property Value int"
  },
  "api/Jiro.Shared.Websocket.Responses.ThemesResponse.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.ThemesResponse.html",
    "title": "Class ThemesResponse | Jiro.Shared Documentation",
    "keywords": "Class ThemesResponse Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents the response for themes. public class ThemesResponse : TrackedObject Inheritance object TrackedObject ThemesResponse Inherited Members TrackedObject.RequestId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Themes Gets or sets the list of available themes. public List<Theme> Themes { get; set; } Property Value List<Theme>"
  },
  "api/Jiro.Shared.Websocket.Responses.WordUpdate.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.WordUpdate.html",
    "title": "Class WordUpdate | Jiro.Shared Documentation",
    "keywords": "Class WordUpdate Namespace Jiro.Shared.Websocket.Responses Assembly Jiro.Shared.dll Represents a word update in a streaming message. public class WordUpdate Inheritance object WordUpdate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsComplete Gets or sets whether this is the final word in the message. public bool IsComplete { get; set; } Property Value bool MessageId Gets or sets the message ID that this word belongs to. public string MessageId { get; set; } Property Value string Position Gets or sets the position of this word in the message (0-based). public int Position { get; set; } Property Value int Timestamp Gets or sets the timestamp when this word was generated. public DateTime Timestamp { get; set; } Property Value DateTime Word Gets or sets the word or token being streamed. public string Word { get; set; } Property Value string"
  },
  "api/Jiro.Shared.Websocket.Responses.html": {
    "href": "api/Jiro.Shared.Websocket.Responses.html",
    "title": "Namespace Jiro.Shared.Websocket.Responses | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Websocket.Responses Classes ChatMessage Represents a chat message in the session response. ChatSession Represents a chat session. CommandsMetadataResponse Represents the response for commands metadata. ConfigResponse Represents the response for configuration. ConfigUpdateResponse Represents the response for configuration updates. ErrorResponse Represents the response for errors. LogsResponse Represents the response for logs. MachineInfoResponse SessionCommandResponse Represents a command execution response with tracking information. SessionResponse Represents the response for a single session with messages. SessionsResponse Represents the response for sessions. ThemesResponse Represents the response for themes. WordUpdate Represents a word update in a streaming message."
  },
  "api/Jiro.Shared.Websocket.html": {
    "href": "api/Jiro.Shared.Websocket.html",
    "title": "Namespace Jiro.Shared.Websocket | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared.Websocket Classes Events Defines constant event names used for WebSocket communication between Jiro clients and servers. These events represent client-to-server messages where the client is responding to or acknowledging server requests. JiroInstanceBase Base class for Jiro client implementations. Provides automatic event wiring for SignalR hub connections. Interfaces IJiroHubClient Interface for server-to-client events. Used by the server to push events to connected clients. IJiroHubServer Interface for client-to-server events. Used by server to handle events from connected clients. IJiroInstance Interface for the Jiro client implementation. Defines events received from the server and methods to send responses."
  },
  "api/Jiro.Shared.html": {
    "href": "api/Jiro.Shared.html",
    "title": "Namespace Jiro.Shared | Jiro.Shared Documentation",
    "keywords": "Namespace Jiro.Shared Classes SynchronizationToken Represents a synchronization token containing instance and session identifiers for tracking command execution across distributed systems. TrackedObject Base class for objects that require request ID tracking"
  },
  "api/JiroCloud.Shared.Extensions.MemoryExtensions.html": {
    "href": "api/JiroCloud.Shared.Extensions.MemoryExtensions.html",
    "title": "Class MemoryExtensions | Jiro.Shared Documentation",
    "keywords": "Class MemoryExtensions Namespace JiroCloud.Shared.Extensions Assembly Jiro.Shared.dll Provides extension methods for IMemoryCache to simplify cache retrieval and type-safe access. public static class MemoryExtensions Inheritance object MemoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(IMemoryCache, object) Retrieves a value from the cache by key. public static object? Get(this IMemoryCache cache, object key) Parameters cache IMemoryCache The memory cache instance. key object The key of the cached item. Returns object The cached value if found; otherwise, null. Get<TItem>(IMemoryCache, object) Retrieves a value from the cache by key and casts it to the specified type. public static TItem? Get<TItem>(this IMemoryCache cache, object key) Parameters cache IMemoryCache The memory cache instance. key object The key of the cached item. Returns TItem The cached value cast to TItem if found; otherwise, the default value of TItem. Type Parameters TItem The type of the cached item. TryGetValue<TItem>(IMemoryCache, object, out TItem?) Attempts to retrieve a value from the cache by key and cast it to the specified type. public static bool TryGetValue<TItem>(this IMemoryCache cache, object key, out TItem? value) Parameters cache IMemoryCache The memory cache instance. key object The key of the cached item. value TItem When this method returns, contains the cached value cast to TItem if found; otherwise, the default value of TItem. Returns bool true if the value was found and cast successfully; otherwise, false. Type Parameters TItem The type of the cached item."
  },
  "api/JiroCloud.Shared.Extensions.html": {
    "href": "api/JiroCloud.Shared.Extensions.html",
    "title": "Namespace JiroCloud.Shared.Extensions | Jiro.Shared Documentation",
    "keywords": "Namespace JiroCloud.Shared.Extensions Classes MemoryExtensions Provides extension methods for IMemoryCache to simplify cache retrieval and type-safe access."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | Jiro.Shared Documentation",
    "keywords": "API Reference This section contains the complete API reference for Jiro.Shared. Namespaces The library is organized into the following namespaces: Jiro.Shared - Core shared system Jiro.Shared.Grpc - gRPC definitions and services Jiro.Shared.Websocket - WebSocket models and interfaces Jiro.Shared.Websocket.Requests - Request models Jiro.Shared.Websocket.Responses - Response models Getting Started Browse the API documentation to understand the available classes, interfaces, and methods in Jiro.Shared."
  },
  "docs/changelog/code-names.html": {
    "href": "docs/changelog/code-names.html",
    "title": "Jiro.Shared Release Code Names | Jiro.Shared Documentation",
    "keywords": "Jiro.Shared Release Code Names This document contains the code naming convention and reference for Jiro.Shared releases. Code Naming Theme Jiro.Shared uses Japanese-inspired code names that reflect the spirit and theme of each major release. The names are chosen to be: Meaningful: Reflecting the key improvements or theme of the release Memorable: Easy to remember and reference Cultural: Inspired by Japanese concepts and philosophy Release History Version Code Name Japanese Meaning Theme v1.4.4 Shūsei 修正 Correction/Fix Interface Alignment & Event Fix v1.4.3 Seiri 整理 Organization/Cleanup Code Organization & Serialization Cleanup v1.4.2 Nagare 流れ Flow Comprehensive Streaming Support v1.4.1 - - - Bug Fixes v1.4.0 Tōgō 統合 Integration/Unification TaskManager Integration & Proto Distribution v1.3.2 Seisō 整理 Organization/Cleanup Clean Logging Optimization v1.3.1 Seigō 精確 Precision/Accuracy Serialization Fixes & Enhanced Logging v1.3.0 Ōtō 応答 Response/Acknowledgment ActionResult & Response Pattern v1.2.2 Tsuiseki 追跡 Tracking/Tracing Stream Request Tracking v1.2.1 Bunri 分離 Separation Method Organization v1.2.0 Nagare 流れ Flow/Stream Streaming Infrastructure v1.1.6 Shinpo 進歩 Progress & Advancement Continued Improvements v1.1.5 Kiban 基盤 Foundation Client Base Class & Event Wiring v1.1.4 Chōwa 調和 Harmony Interface Naming Clarity v1.1.3 Kizen 基盤 Foundation Refinement Model Enhancement & API Consistency v1.1.2 Shinpo 進歩 Progress & Advancement Documentation & Testing v1.1.1 Byakko 白虎 White Tiger Response Handlers & SignalR v1.1.0 Kaizen 改善 Continuous Improvement Enhancement & Extension v1.0.0 Hajimari 始まり Beginning Initial Release & Foundation Future Code Name Ideas For future reference, here are potential code names for upcoming releases: Minor Releases (v1.x.x) Shinpo (進歩) - \"Progress & Advancement\" - for enhanced features and capabilities Kizen (基盤) - \"Foundation\" - for infrastructure improvements Yūki (勇気) - \"Courage\" - for bold new features Chikara (力) - \"Power/Strength\" - for performance improvements Major Releases (v2.x.x+) Shinseiki (新世紀) - \"New Era\" - for paradigm shifts Kakushin (革新) - \"Innovation\" - for breakthrough changes Takumi (匠) - \"Artisan/Craftsman\" - for refined, polished releases Mirai (未来) - \"Future\" - for forward-looking, modern releases Chōwa (調和) - \"Harmony\" - for integration and compatibility releases Chōten (頂点) - \"Peak/Summit\" - for performance and optimization releases Hatsumeika (発明家) - \"Inventor\" - for innovative features Kanzen (完全) - \"Perfection\" - for feature-complete releases Rinkaku (輪郭) - \"Outline/Definition\" - for API standardization Kesshō (結晶) - \"Crystal\" - for clarity and precision improvements Guidelines When choosing a code name for a new release: Consider the Theme: What is the main focus of this release? Check Cultural Accuracy: Ensure proper understanding of Japanese terms Maintain Consistency: Follow the established pattern and style Document Meaning: Always include both Japanese characters and English meaning Test Pronunciation: Ensure the name is reasonably easy to pronounce Usage Code names should be used in: Changelog titles Release announcements Marketing materials Internal documentation Git tags (optional: v3.0.0-shinpo) The code name appears in the format: Version \"CodeName\" (e.g., v3.0.0 \"Shinpo\")"
  },
  "docs/changelog/index.html": {
    "href": "docs/changelog/index.html",
    "title": "Changelog | Jiro.Shared Documentation",
    "keywords": "Changelog Welcome to the Jiro.Shared changelog. This section contains detailed information about all changes, updates, and releases for each version of the shared types and models library. Available Versions v1.4.3 \"Seiri\" - Organization & cleanup with code deduplication and serialization fixes v1.4.2 \"Nagare\" - Flow enhancement with comprehensive streaming support for chat, logs, and word-by-word content v1.4.1 \"Kaizen\" - Continuous improvement with performance optimizations and bug fixes v1.4.0 \"Shinpo\" - Advanced progress with enhanced features and architectural improvements v1.3.2 \"Seisō\" - Clean logging optimization by removing verbose request/response body logging v1.3.1 \"Seigō\" - Precision & reliability fixes with SignalR serialization improvements and enhanced logging v1.3.0 \"Ōtō\" - Response acknowledgment with ActionResult returns and channel-based streaming v1.2.2 \"Tsuiseki\" - Stream request tracking with request ID support and improved hub method organization v1.2.1 \"Bunri\" - Streaming architecture refinement with two-phase streaming pattern v1.2.0 \"Nagare\" - Streaming support for logs and session messages with IAsyncEnumerable v1.1.6 \"Shinpo\" - Progress enhancement with improved connection handling, thread safety, and enhanced logging for JiroClientBase v1.1.5 \"Kiban\" - Foundation strengthening with JiroClientBase abstract class for simplified client implementations v1.1.4 \"Chōwa\" - Interface harmony with clearer WebSocket interface naming conventions v1.1.3 \"Kizen\" - Foundation refinement with enhanced session request models and improved API consistency v1.1.2 \"Shinpo\" - Progress and advancement with documentation improvements and bug fixes v1.1.1 \"Byakko\" - Response handler methods with [HubMethodName] attributes for all client-to-server responses v1.1.0 \"Kaizen\" - Enhancement release with system monitoring, memory cache utilities, and database extensions v1.0.1 - Patch release fixing NuGet package display issues v1.0.0 \"Hajimari\" - Initial release with WebSocket endpoints, gRPC definitions, and shared models Resources Code Names Reference - Complete guide to release code naming convention and future ideas About This Section Each version has its own dedicated changelog file with comprehensive details about: ✨ Features Added - New functionality and capabilities 🔄 Changes - Modifications to existing features 🐛 Bug Fixes - Issues resolved in the release 🛠️ Technical Details - Architecture and implementation changes 📊 Metrics - Release statistics and performance data Versioning Jiro.Shared follows semantic versioning (SemVer) with meaningful code names: Code Names: Each major release includes a Japanese-inspired code name that reflects the theme of the release Semantic Versioning: MAJOR.MINOR.PATCH format following SemVer principles Release Branches: Releases are tagged from the main branch This project follows Semantic Versioning (SemVer) for version numbering."
  },
  "docs/changelog/v1.0.0.html": {
    "href": "docs/changelog/v1.0.0.html",
    "title": "v1.0.0 \"Hajimari\" - Initial Release | Jiro.Shared Documentation",
    "keywords": "v1.0.0 \"Hajimari\" - Initial Release Release Date: July 17, 2025 Code Name: \"Hajimari\" (Beginning) Type: Major Release 🎯 Overview The initial release of Jiro.Shared introduces the foundational shared types and models library for the Jiro ecosystem. This package provides the core communication contracts and data structures used across JiroCloud and Jiro instances. ✨ Features Added WebSocket Communication Endpoint Constants: Predefined endpoint definitions for consistent WebSocket communication Endpoints.Incoming.* - Server to client events Endpoints.Outgoing.* - Client to server events Endpoints.Lifecycle.* - Connection lifecycle events Request/Response Models Chat Session Models: ChatSession, SessionResponse, SessionsResponse Command Models: CommandMessage, CommandMetadata, CommandsMetadataResponse Configuration Models: ConfigResponse, ConfigUpdateResponse Logging Models: LogEntry, LogsResponse Theme Models: Theme, ThemesResponse Core Models: ErrorResponse, KeepaliveResponse, SyncResponse WebSocket Parameters: Connection and communication parameter models gRPC Integration Protocol Buffers: gRPC service definitions in Grpc/jiroHub.proto Generated Services: Strongly-typed gRPC client and server code Type Safety: Compile-time validation for service contracts Package Configuration NuGet Package: Properly configured as Jiro.Shared with full metadata Documentation: XML documentation for IntelliSense support Dependencies: gRPC, Protocol Buffers, and ASP.NET Core integration Icon and README: Professional package presentation 🛠️ Technical Details Framework Support Target Framework: .NET 9.0 Language Features: C# 13 with nullable reference types enabled Documentation: XML documentation file generation enabled Dependencies Grpc.AspNetCore v2.66.0 Google.Protobuf v3.28.2 Grpc.Tools v2.66.0 (build-time only) Project Structure source/Jiro.Shared/ ├── Grpc/ │ └── jiroHub.proto # gRPC service definitions ├── Websocket/ │ ├── Endpoints.cs # WebSocket endpoint constants │ ├── Requests/ # Request models │ └── Responses/ # Response models ├── Jiro.Shared.csproj # Project configuration └── Jiro.Shared.nuspec # NuGet package specification 📊 Release Metrics Total Files: 15+ source files Models Added: 15+ request/response models Endpoint Constants: 25+ predefined endpoints Package Size: ~50KB Dependencies: 3 runtime + 1 build-time 🎉 What This Enables For Developers Type Safety: Strongly-typed contracts for all communication IntelliSense: Full IDE support with XML documentation Consistency: Standardized models across the Jiro ecosystem Integration: Seamless gRPC and WebSocket communication For Applications Reliability: Compile-time validation of communication contracts Performance: Efficient binary serialization with Protocol Buffers Scalability: Foundation for distributed Jiro ecosystem Maintainability: Centralized type definitions 🔮 Looking Forward This initial release establishes the foundation for: Enhanced real-time communication features Additional gRPC service definitions Extended model collections Performance optimizations Cross-platform compatibility improvements 📦 Installation dotnet add package Jiro.Shared --version 1.0.0 🙏 Acknowledgments Special thanks to the Jiro ecosystem development team for establishing these foundational shared types that will enable seamless communication across all Jiro applications. Next Release: v1.0.1 will focus on expanding the model collection and adding performance optimizations based on initial usage feedback."
  },
  "docs/changelog/v1.0.1.html": {
    "href": "docs/changelog/v1.0.1.html",
    "title": "v1.0.1 \"Kōsei\" - Correction & Presentation | Jiro.Shared Documentation",
    "keywords": "v1.0.1 \"Kōsei\" - Correction & Presentation Release Date: July 17, 2025 Code Name: \"Kōsei\" (Correction) Type: Patch Release 🎯 Overview Version 1.0.1 is a patch release focused on resolving NuGet package display issues and improving documentation presentation for the Jiro.Shared library. No API or functional changes were made. 🐛 Bug Fixes NuGet Package Display: Fixed issues with images and badges not rendering correctly on the NuGet package page. ✨ Changes README.nuget.md: Added a clean, NuGet-optimized README file without images, badges, or HTML formatting for proper display on NuGet.org. Project Configuration: Updated PackageReadmeFile property in Jiro.Shared.csproj to use the new clean README for NuGet packaging. Documentation: Maintained the original README.md for GitHub with full formatting. Version Bump: Updated version from 1.0.0 to 1.0.1. �️ Technical Details Files Modified: Jiro.Shared.csproj: Updated version and README file reference Added README.nuget.md: Clean documentation for NuGet Maintained README.md: Full-featured documentation for GitHub Package Contents: Clean, readable documentation without display issues All original functionality and APIs unchanged Proper licensing and metadata Project icon (Jiro-Icon.png) 🚀 Deployment Version 1.0.1 has been built, tested, and is ready for deployment to NuGet.org. Note: This patch release is focused solely on improving the NuGet package presentation. No breaking changes or API modifications were made."
  },
  "docs/changelog/v1.1.0.html": {
    "href": "docs/changelog/v1.1.0.html",
    "title": "v1.1.0 \"Kaizen\" - Enhancement & Extension | Jiro.Shared Documentation",
    "keywords": "v1.1.0 \"Kaizen\" - Enhancement & Extension Release Date: July 17, 2025 Code Name: \"Kaizen\" (Continuous Improvement) Type: Minor Release 🎯 Overview Version 1.1.0 delivers major enhancements to the Jiro.Shared library, focusing on continuous improvement through new system monitoring models, database service extensions, memory cache utilities, and application-level helpers. This release is designed to improve developer experience, integration, and performance across the Jiro ecosystem. ✨ Features Added System Information Models: Added SystemInfo and ConfigurationSection classes for capturing system and configuration data. Memory Cache Extensions: Introduced type-safe and flexible cache retrieval methods in MemoryExtensions. Service Registration Extensions: Added AddMySqlContext<T> and AddSqliteContext<T> for streamlined database integration. Application Utilities: New ApplicationUtilities.IsDebug() method for debug mode detection and runtime awareness. 🔄 Changes Enhanced Type Safety: All new APIs use generic constraints and support nullable reference types. Database Integration: Simplified service registration and migration assembly configuration for EF Core providers. Performance Optimizations: Improved memory cache access and reduced allocations in utility methods. Documentation: Comprehensive XML documentation for all new APIs and features. 🐛 Bug Fixes N/A (No user-facing bugs fixed in this release) 🛠️ Technical Details Dependencies: Microsoft.EntityFrameworkCore (core EF functionality) Pomelo.EntityFrameworkCore.MySql (MySQL provider) Microsoft.EntityFrameworkCore.Sqlite (SQLite provider) Microsoft.Extensions.Caching.Memory (memory cache abstractions) Test Coverage: Added unit and integration tests for new models and extensions. Backward Compatibility: All changes are backward compatible; no breaking changes introduced. 📋 Usage Examples Example: System Information Model var systemInfo = new SystemInfo { OperatingSystem = Environment.OSVersion.ToString(), RuntimeVersion = Environment.Version.ToString(), MachineName = Environment.MachineName, ProcessorCount = Environment.ProcessorCount, TotalMemory = GC.GetTotalMemory(false) }; Example: Memory Cache Extensions // Type-safe cache retrieval var user = cache.Get<User>(\"user-123\"); // Safe retrieval with validation if (cache.TryGetValue<Settings>(\"app-settings\", out var settings)) { // Use settings safely } Example: Service Registration Extensions // MySQL registration services.AddMySqlContext<AppDbContext>(connectionString); // SQLite registration services.AddSqliteContext<LocalDbContext>(\"app.db\"); 🚀 Release & Deployment Version 1.1.0 has been built, tested, and is ready for deployment to NuGet.org. All tests pass on .NET 9.0 runtime. Documentation updated with new API references. Note: This minor release significantly enhances the utility and functionality of Jiro.Shared while maintaining full backward compatibility with existing implementations. 📖 Usage Examples System Information var systemInfo = new SystemInfo { OperatingSystem = Environment.OSVersion.ToString(), RuntimeVersion = Environment.Version.ToString(), MachineName = Environment.MachineName, ProcessorCount = Environment.ProcessorCount, TotalMemory = GC.GetTotalMemory(false) }; Memory Cache Extensions // Type-safe cache retrieval var user = cache.Get<User>(\"user-123\"); // Safe retrieval with validation if (cache.TryGetValue<Settings>(\"app-settings\", out var settings)) { // Use settings safely } Service Registration // MySQL registration services.AddMySqlContext<AppDbContext>(connectionString); // SQLite registration services.AddSqliteContext<LocalDbContext>(\"app.db\"); 🔄 Breaking Changes None - This is a minor release with full backward compatibility. 🏗️ Migration Guide No migration required. All existing code continues to work without changes. New features are additive and optional. 📋 Testing All new components include comprehensive unit tests Integration tests added for database service extensions Memory cache extension tests verify type safety and null handling System information models tested across multiple environments 🚀 Deployment Version 1.1.0 has been built and packaged successfully All tests pass on .NET 9.0 runtime Ready for deployment to NuGet.org Documentation updated with new API references Note: This minor release significantly enhances the utility and functionality of Jiro.Shared while maintaining full backward compatibility with existing implementations."
  },
  "docs/changelog/v1.1.1.html": {
    "href": "docs/changelog/v1.1.1.html",
    "title": "v1.1.1 \"Byakko\" - Response Handlers & SignalR | Jiro.Shared Documentation",
    "keywords": "v1.1.1 \"Byakko\" - Response Handlers & SignalR Release Date: July 17, 2025 Code Name: \"Byakko\" (White Tiger) Type: Patch Release 🎯 Overview Version 1.1.1 introduces response handler methods with [HubMethodName] attributes to the IJiroServerHub interface, replacing the previous event-based pattern for client-to-server responses. This update improves type safety, discoverability, and integration with SignalR-based communication. ✨ Features Added Response Handler Methods: All client-to-server responses now use strongly-typed handler methods with [HubMethodName] attributes in IJiroServerHub. SignalR Integration: Enhanced compatibility with SignalR and improved method mapping for real-time communication. 🔄 Changes Documentation: Updated XML documentation and changelog to reflect the new response handler approach. Changelog Format: Standardized changelog format for consistency across releases. 🐛 Bug Fixes N/A (No user-facing bugs fixed in this release) 🛠️ Technical Details Backward Compatibility: No breaking changes; event-based pattern is deprecated but still available for transition. Test Coverage: Added unit tests for new handler methods and attribute mapping. 🚀 Deployment Version 1.1.1 has been built, tested, and is ready for deployment to NuGet.org. Note: This patch release focuses on improving the developer experience and maintainability of the Jiro.Shared library's real-time communication layer."
  },
  "docs/changelog/v1.1.2.html": {
    "href": "docs/changelog/v1.1.2.html",
    "title": "v1.1.2 \"Shinpo\" - Progress & Advancement | Jiro.Shared Documentation",
    "keywords": "v1.1.2 \"Shinpo\" - Progress & Advancement Release Date: July 19, 2025 Code Name: \"Shinpo\" (Progress & Advancement) Type: Patch Release 🎯 Overview Version 1.1.2 is a patch release focused on incremental improvements, bug fixes, and documentation updates to further stabilize and enhance the Jiro.Shared library. This release continues the theme of progress and advancement, ensuring a robust foundation for future development. ✨ Features Added Improved Documentation: Expanded XML documentation for all WebSocket request and response models for better IntelliSense and API clarity. Additional Unit Tests: Added tests for new response handler methods and edge cases in IJiroServerHub. 🐛 Bug Fixes Response Handler Consistency: Fixed minor inconsistencies in [HubMethodName] attributes and ensured all client-to-server responses are properly mapped. Typo Corrections: Corrected typos in model property names and documentation comments. 🔄 Changes Changelog Updates: Standardized changelog format across all versions for consistency. NuGet Metadata: Updated package metadata for improved discoverability and presentation. 🛠️ Technical Details Backward Compatibility: No breaking changes; all updates are backward compatible. Test Coverage: Increased unit test coverage for response handlers and WebSocket models. Documentation: All new and updated APIs include XML documentation. 🚀 Deployment Version 1.1.2 has been built, tested, and is ready for deployment to NuGet.org. All tests pass on .NET 9.0 runtime. Note: This patch release is part of the ongoing effort to improve code quality, documentation, and developer experience in the Jiro.Shared library."
  },
  "docs/changelog/v1.1.3.html": {
    "href": "docs/changelog/v1.1.3.html",
    "title": "v1.1.3 \"Kizen\" - Foundation Refinement | Jiro.Shared Documentation",
    "keywords": "v1.1.3 \"Kizen\" - Foundation Refinement Release Date: July 20, 2025 Code Name: \"Kizen\" (Foundation Refinement) Type: Patch Release 🎯 Overview Version 1.1.3 is a patch release focused on refining the foundation of the Jiro.Shared library with enhanced request models and improved API consistency. This release strengthens the core communication infrastructure by adding essential properties to existing request models. ✨ Features Added Enhanced Session Requests: Added SessionId property to GetSessionRequest model for more precise session targeting and improved request specificity. Request Model Completeness: Improved the completeness of WebSocket request models for better client-server communication patterns. 🐛 Bug Fixes N/A (No user-facing bugs fixed in this release) 🔄 Changes API Enhancement: Extended GetSessionRequest with SessionId property to allow direct session identification alongside instance-based lookups. Model Consistency: Improved consistency across request models to ensure all necessary identifiers are available. 🛠️ Technical Details Backward Compatibility: Fully backward compatible; new properties are optional and default to empty strings. Type Safety: All new properties maintain strong typing and include comprehensive XML documentation. Documentation: Updated XML documentation for enhanced IntelliSense support. 🚀 Deployment Version 1.1.3 has been built, tested, and is ready for deployment to NuGet.org. All tests pass on .NET 9.0 runtime. Package metadata updated with latest version information. Note: This patch release continues the foundation strengthening effort, ensuring robust and complete API models for the Jiro ecosystem."
  },
  "docs/changelog/v1.1.4.html": {
    "href": "docs/changelog/v1.1.4.html",
    "title": "v1.1.4 \"Chōwa\" - Interface Harmony | Jiro.Shared Documentation",
    "keywords": "v1.1.4 \"Chōwa\" - Interface Harmony Release Date: July 21, 2025 Code Name: \"Chōwa\" (調和 - Harmony) Type: Patch Release 🎯 Overview Version 1.1.4 is a patch release focused on improving the clarity and harmony of WebSocket interface naming conventions. This release addresses developer feedback about confusing interface names, making the Jiro.Shared library more intuitive and easier to understand for developers integrating with the ecosystem. ✨ Features Added Clearer Interface Naming: Renamed WebSocket interfaces to better reflect their purpose and communication direction. Improved Developer Experience: Interface names now immediately convey whether they handle server-to-client or client-to-server communication. 🐛 Bug Fixes N/A (No user-facing bugs fixed in this release) 🔄 Changes Interface Renames IJiroClient → IServerToClientEvents: Now clearly indicates this interface handles server-to-client push events. IJiroHubClient → IClientToServerResponses: Now clearly indicates this interface handles client-to-server responses in strongly-typed hubs. IJiroSocketClient → IJiroClient: Simplified naming for the main client implementation interface. Documentation Updates Updated all XML documentation to reflect the new interface purposes. Enhanced region names within interfaces for better code organization. Improved method and event descriptions for clarity. 🛠️ Technical Details Breaking Change: This is a breaking change for consumers using the old interface names. Update your code to use the new interface names. Migration Path: Simple find-and-replace of interface names in consuming code. Type Safety: All functionality remains unchanged; only names have been updated. Documentation: Comprehensive XML documentation updated throughout. 💻 Migration Guide // Old usage public class MyHub : Hub<IJiroClient> { } public class MyClient : IJiroSocketClient { } // New usage public class MyHub : Hub<IServerToClientEvents> { } public class MyClient : IJiroClient { } 🚀 Deployment Version 1.1.4 has been built, tested, and is ready for deployment to NuGet.org. All tests pass on .NET 9.0 runtime. Package metadata updated with latest version information. Note: This release brings harmony to the interface naming conventions, making the Jiro.Shared library more approachable and reducing cognitive load for developers working with the WebSocket communication layer."
  },
  "docs/changelog/v1.1.5.html": {
    "href": "docs/changelog/v1.1.5.html",
    "title": "v1.1.5 \"Kiban\" - Foundation Strengthening | Jiro.Shared Documentation",
    "keywords": "v1.1.5 \"Kiban\" - Foundation Strengthening Release Date: July 21, 2025 Code Name: \"Kiban\" (基盤 - Foundation) Type: Minor Release 🎯 Overview Version 1.1.5 strengthens the foundation of Jiro.Shared by introducing a base class for client implementations. This release simplifies the development of Jiro clients by providing automatic SignalR event wiring and comprehensive logging capabilities, reducing boilerplate code and improving observability. ✨ Features Added JiroClientBase Abstract Class: New base class that automatically wires up SignalR hub events to IJiroClient interface events. Automatic Event Wiring: Eliminates the need for manual SignalR event registration in client implementations. Built-in Logging Support: Comprehensive logging for all WebSocket events with before/after execution tracking. Constructor Flexibility: Optional logger parameter allows for custom logging implementations. 🐛 Bug Fixes N/A (No user-facing bugs fixed in this release) 🔄 Changes New Components JiroClientBase.cs: Abstract base class providing: Automatic SignalR hub connection event wiring Structured logging for all events Protected hub connection access for derived classes Virtual initialization and cleanup methods Logging Enhancements All events now log with structured format: [INF] {EventName} received - When an event is triggered [INF] {EventName} executed - After successful execution Optional logger injection through constructor 🛠️ Technical Details Non-Breaking Change: Existing IJiroClient implementations continue to work unchanged. Inheritance Model: New clients can inherit from JiroClientBase for simplified implementation. Exception Handling: Throws NotImplementedException for unhandled events, ensuring proper implementation. Performance: Minimal overhead with optional logging (null-checked). 💻 Usage Example // Simple client implementation with automatic event wiring public class MyJiroClient : JiroClientBase { public MyJiroClient(HubConnection connection, ILogger<MyJiroClient> logger) : base(connection, logger) { // Events are automatically wired up! CommandReceived += async (command) => { // Handle command }; LogsRequested += async (request) => { // Return logs return new LogsResponse { /* ... */ }; }; } } 🚀 Deployment Version 1.1.5 has been built, tested, and is ready for deployment to NuGet.org. All tests pass on .NET 9.0 runtime. Package metadata updated with latest version information. Note: This release strengthens the foundation of client implementations, making it easier and faster to build robust Jiro clients with proper logging and event handling out of the box."
  },
  "docs/changelog/v1.1.6.html": {
    "href": "docs/changelog/v1.1.6.html",
    "title": "v1.1.6 \"Shinpo\" - Progress Enhancement | Jiro.Shared Documentation",
    "keywords": "v1.1.6 \"Shinpo\" - Progress Enhancement Release Date: July 22, 2025 Code Name: \"Shinpo\" (進歩 - Progress/Advancement) Type: Minor Release 🎯 Overview Version 1.1.6 enhances the JiroClientBase foundation with improved connection handling, thread safety, and enhanced logging capabilities. This release focuses on making client implementations more robust and production-ready with better error handling and connection lifecycle management. ✨ Features Added Enhanced Connection Management: New InitializeAsync method with comprehensive connection setup and error handling Thread-Safe Operations: Added SemaphoreSlim for connection synchronization to prevent race conditions Improved RPC Handling: Streamlined server-to-client RPC calls with better request/response tracking Enhanced Logging: Request/response correlation with RequestId tracking for better observability Flexible Constructor: Constructor now accepts optional HubConnection for more flexible initialization patterns Abstract Handler Setup: New SetupHandlers() abstract method enforces proper handler implementation 🔄 Changes Connection Lifecycle Improvements Initialization Method: New InitializeAsync() with parameters for hub URL, API key, and exception handling Connection State Management: Automatic detection and handling of existing connections before re-initialization API Key Validation: Built-in validation ensures proper authentication configuration Graceful Reconnection: Improved reconnection handling with proper state management Enhanced Event System RPC Method Signatures: Simplified RPC event signatures removing unnecessary Task<> wrapper for direct return types Request Correlation: All RPC calls now log with RequestId for better traceability Null-Safe Event Handling: Improved null checking for event handlers Structured Logging: Enhanced logging format with request/response correlation Code Quality Improvements Thread Safety: Connection operations protected by semaphore Error Handling: Comprehensive exception handling in connection methods Documentation: Enhanced XML documentation for all public methods Validation: Input validation for critical parameters like API keys 🐛 Bug Fixes Race Conditions: Fixed potential race conditions during connection initialization Event Registration: Resolved timing issues with event setup during connection lifecycle Memory Leaks: Improved disposal patterns for connection resources 🛠️ Technical Details Breaking Changes SetupHandlers(): Now abstract method - derived classes must implement this method Constructor Changes: HubConnection parameter is now optional (nullable) Non-Breaking Changes All existing IJiroClient interface methods remain unchanged Existing event signatures are backward compatible Legacy initialization patterns continue to work Performance Improvements Reduced memory allocations in event handling Optimized logging with null-checked conditional execution Improved connection pooling with semaphore-based synchronization 💻 Usage Example // Enhanced client implementation with new initialization pattern public class MyJiroClient : JiroClientBase { public MyJiroClient(ILogger<MyJiroClient> logger) : base(logger: logger) // HubConnection now optional { } protected override void SetupHandlers() { // Required implementation for event handlers CommandReceived += async command => { // Handle command with enhanced logging }; LogsRequested += async request => { // RequestId automatically logged for correlation return new LogsResponse { RequestId = request.RequestId }; }; } // Enhanced initialization with error handling public async Task ConnectAsync(string hubUrl, string apiKey) { await InitializeAsync( hubUrl: hubUrl, apiKey: apiKey, exceptionHandler: (ex, context) => Console.WriteLine($\"Error in {context}: {ex.Message}\") ); } } 🚀 Deployment Version 1.1.6 has been built, tested, and is ready for deployment to NuGet.org All tests pass on .NET 9.0 runtime Package metadata updated with latest version information Enhanced thread safety validated under load testing Note: This release significantly improves the robustness and production-readiness of JiroClientBase, making it easier to build reliable, thread-safe Jiro clients with comprehensive logging and error handling capabilities."
  },
  "docs/changelog/v1.2.0.html": {
    "href": "docs/changelog/v1.2.0.html",
    "title": "v1.2.0 \"Nagare\" - Streaming Revolution | Jiro.Shared Documentation",
    "keywords": "v1.2.0 \"Nagare\" - Streaming Revolution Release Date: July 22, 2025 Code Name: \"Nagare\" (流れ - Flow/Stream) Type: Minor Release 🎯 Overview Version 1.2.0 introduces comprehensive streaming capabilities and enhanced communication infrastructure to the Jiro ecosystem. This release focuses on real-time data streaming, improved WebSocket events, and refined gRPC services, enabling more efficient and responsive communication between Jiro instances and JiroCloud. ✨ Features Added Streaming Infrastructure: New StreamingExtensions class providing comprehensive streaming utilities SignalR Stream Extensions: Enhanced SignalRStreamExtensions for real-time data streaming over WebSocket connections Memory Management: Advanced MemoryExtensions for efficient memory operations and data handling Performance Analysis: New PerformanceAnalyzer utility for monitoring and optimizing application performance Enhanced gRPC Services: Improved jiroHub.proto with new SendSessionMessages RPC call for session communication New Socket Events: Additional WebSocket events for streaming data and enhanced real-time communication Global Suppressions: Comprehensive code analysis suppression configuration 🔄 Changes Streaming and Communication Enhancements Real-Time Data Streaming: Full support for streaming large datasets and real-time updates WebSocket Event Expansion: New events specifically designed for streaming scenarios Session Message Broadcasting: SendSessionMessages gRPC call enables efficient session-wide messaging Request Offset Support: GetLogsRequest now supports offset parameter for paginated log retrieval Infrastructure Improvements Memory Optimization: New memory management utilities for handling large data streams Performance Monitoring: Built-in performance analysis tools for identifying bottlenecks Code Quality: Global suppressions file for consistent code analysis across the project Protocol Buffer Refinement: Cleaned and optimized gRPC service definitions Request/Response Model Updates Session Request Rename: GetSessionRequest renamed to GetSingleSessionRequest for clarity Enhanced Log Retrieval: GetLogsRequest now supports offset-based pagination Streaming-Aware Models: Updated models to support streaming data scenarios 🐛 Bug Fixes gRPC Service Clarity: Resolved ambiguity in protocol buffer definitions Event Handler Reliability: Improved WebSocket event handling for streaming scenarios Memory Management: Fixed potential memory issues with large data streams 🛠️ Technical Details Breaking Changes Request Model Rename: GetSessionRequest → GetSingleSessionRequest Update any code references to use the new class name Functionality remains identical, only naming changed for clarity New Dependencies Enhanced streaming capabilities require updated SignalR and gRPC configurations Memory extensions may require additional system permissions for advanced operations Performance Improvements Streaming Efficiency: Optimized data streaming with reduced memory footprint Real-Time Responsiveness: Improved WebSocket event processing for faster data delivery gRPC Call Optimization: Enhanced protocol buffer serialization for better performance 💻 Usage Examples Streaming Data with New Extensions // Using the new streaming extensions public async Task StreamDataAsync(IAsyncEnumerable<DataChunk> dataStream) { await foreach (var chunk in dataStream.WithMemoryOptimization()) { // Process streaming data efficiently await ProcessChunk(chunk); } } Enhanced Session Communication // Using the new SendSessionMessages RPC call var sessionMessages = new SessionMessagesRequest { SessionId = \"session-123\", Messages = { message1, message2, message3 } }; await jiroHubClient.SendSessionMessagesAsync(sessionMessages); Performance Monitoring // Using the new PerformanceAnalyzer using var analyzer = new PerformanceAnalyzer(\"StreamingOperation\"); await PerformStreamingOperation(); // Performance metrics automatically captured and logged Paginated Log Retrieval // Using the enhanced GetLogsRequest with offset var logsRequest = new GetLogsRequest { Count = 50, Offset = 100, // New offset parameter for pagination SessionId = \"session-456\" }; var response = await GetLogsAsync(logsRequest); 🚀 Deployment Version 1.2.0 has been built, tested, and is ready for deployment to NuGet.org All tests pass on .NET 9.0 runtime with streaming scenarios validated Package metadata updated with latest version information Streaming performance benchmarked and optimized for production workloads 🔮 Future Considerations Streaming capabilities lay the foundation for real-time collaborative features Enhanced gRPC services enable more sophisticated inter-service communication Performance monitoring tools provide insights for future optimization efforts Note: This release significantly enhances the real-time capabilities of the Jiro ecosystem, enabling efficient data streaming, improved session management, and comprehensive performance monitoring. The streaming infrastructure opens up new possibilities for responsive, data-intensive applications built on the Jiro platform."
  },
  "docs/changelog/v1.2.1.html": {
    "href": "docs/changelog/v1.2.1.html",
    "title": "v1.2.1 \"Bunri\" - Streaming Architecture Refinement | Jiro.Shared Documentation",
    "keywords": "v1.2.1 \"Bunri\" - Streaming Architecture Refinement Release Date: July 23, 2025 Code Name: \"Bunri\" (分離 - Separation/Division) Type: Patch Release 🎯 Overview Version 1.2.1 refines the streaming architecture introduced in v1.2.0 by separating the streaming request and response patterns. This release addresses architectural concerns with the single-method streaming approach and implements a cleaner, more maintainable two-phase pattern for streaming operations. 🔧 Breaking Changes Streaming Method Architecture Refactoring The streaming methods have been fundamentally restructured to use a two-phase approach: Before (v1.2.0) // Single method returning IAsyncEnumerable IAsyncEnumerable<LogEntry> RequestLogsStreamAsync(GetLogsRequest request); IAsyncEnumerable<ChatMessage> RequestSessionMessagesStreamAsync(GetSingleSessionRequest request); After (v1.2.1) // Phase 1: Request streaming (server notifies client) Task RequestLogsStreamAsync(GetLogsRequest request); Task RequestSessionMessagesStreamAsync(GetSingleSessionRequest request); // Phase 2: Receive streaming (client sends stream back) Task ReceiveLogsStreamAsync(IAsyncEnumerable<LogEntry> stream, CancellationToken cancellationToken = default); Task ReceiveSessionMessagesStreamAsync(IAsyncEnumerable<ChatMessage> stream, CancellationToken cancellationToken = default); Event Handler Changes Stream request event handlers now return Task instead of IAsyncEnumerable: // Updated event signatures public event Func<GetLogsRequest, Task>? LogsStreamRequested; public event Func<GetSingleSessionRequest, Task>? SessionMessagesStreamRequested; New Event Constants Added new event constants for the receive phase: Events.ReceiveLogsStream - Event fired when client sends logs stream to server Events.ReceiveSessionMessagesStream - Event fired when client sends session messages stream to server 🛠️ Technical Details Implementation Changes IJiroHub Interface: Updated streaming methods to return Task and added new receive methods IJiroClient Interface: Updated event signatures and added receive method declarations JiroClientBase Class: Modified event wiring from OnStream to OnNotification for requests Events Class: Added new constants for receive stream events Migration Guide If you were using the previous streaming methods: Server-side (Hub): Replace IAsyncEnumerable<T> returns with Task Implement separate Receive*StreamAsync methods for handling incoming streams Client-side: Update event handlers to return Task instead of IAsyncEnumerable<T> Use the new Receive*StreamAsync methods to send stream data back to server Event Handling: Stream requests are now fire-and-forget notifications Stream data is sent separately using the receive methods Architecture Benefits Cleaner separation of concerns: Request and response phases are clearly distinct Better error handling: Each phase can handle errors independently Improved maintainability: Easier to debug and extend streaming functionality IAsyncEnumerable streaming: Uses IAsyncEnumerable<T> with cancellation token support for robust stream handling Cancellation support: Built-in cancellation token support for proper resource cleanup 🔄 Changes Streaming Infrastructure Improvements Two-Phase Streaming: Clear separation between requesting streams and receiving stream data IAsyncEnumerable Transport: Leverages IAsyncEnumerable<T> for reliable stream data transport Cancellation Token Support: Built-in cancellation support for proper resource cleanup Event Architecture: Simplified event handling with distinct phases Error Isolation: Better error handling between request and response phases Code Quality Enhancements Method Naming Clarity: Clear distinction between Request* and Receive* methods Type Safety: Strong typing with IAsyncEnumerable<T> and proper cancellation token support Event Consistency: Consistent event pattern across all streaming operations 💻 Usage Examples Server-Side Implementation // Phase 1: Server requests stream from client await hubConnection.InvokeAsync(\"RequestLogsStreamAsync\", new GetLogsRequest { SessionId = \"session-123\", Count = 100 }); // Phase 2: Server receives stream from client (handled automatically) public async Task ReceiveLogsStreamAsync(IAsyncEnumerable<LogEntry> stream, CancellationToken cancellationToken = default) { await foreach (var logEntry in stream.WithCancellation(cancellationToken)) { // Process each log entry as it arrives await ProcessLogEntry(logEntry); } } Client-Side Implementation // Phase 1: Handle stream request from server LogsStreamRequested += async (request) => { // Phase 2: Send stream back to server using async enumerable await ReceiveLogsStreamAsync(GetLogStreamAsync(request)); }; // Helper method to create async enumerable stream private async IAsyncEnumerable<LogEntry> GetLogStreamAsync(GetLogsRequest request, CancellationToken cancellationToken = default) { // Generate log entries based on request for (int i = 0; i < request.Count; i++) { cancellationToken.ThrowIfCancellationRequested(); var logEntry = await GetLogEntryAsync(request.SessionId, i); yield return logEntry; // Simulate streaming delay await Task.Delay(100, cancellationToken); } } 🚀 Deployment Version 1.2.1 maintains full backward compatibility for non-streaming operations Streaming operations require code updates as outlined in the migration guide All tests updated and validated with the new streaming architecture Package documentation updated with new streaming patterns 🔮 Future Considerations The two-phase streaming architecture provides a solid foundation for advanced streaming scenarios IAsyncEnumerable-based transport enables natural integration with .NET's async streaming patterns Built-in cancellation token support allows for proper resource cleanup and operation cancellation Clear separation allows for independent evolution of request and response phases Note: This release represents a significant architectural improvement to the streaming infrastructure. While it introduces breaking changes to streaming operations, the new pattern provides better maintainability, error handling, and extensibility for future streaming enhancements."
  },
  "docs/changelog/v1.2.2.html": {
    "href": "docs/changelog/v1.2.2.html",
    "title": "v1.2.2 \"Tsuiseki\" - Stream Request Tracking | Jiro.Shared Documentation",
    "keywords": "v1.2.2 \"Tsuiseki\" - Stream Request Tracking Release Date: July 24, 2025 Code Name: \"Tsuiseki\" (追跡 - Tracking/Tracing) Type: Patch Release 🎯 Overview Version 1.2.2 enhances the streaming architecture with request ID tracking and improves the separation between server-to-client and client-to-server methods. This release provides better traceability for streaming operations and cleaner architectural boundaries in the hub implementation. 🛠️ Technical Details Request ID Tracking for Streams All streaming operations now include request ID tracking, enabling: Better correlation between stream requests and responses Improved debugging and monitoring capabilities Enhanced error tracking for streaming operations Method Separation in Hub The hub implementation now clearly separates: Server-to-Client Methods: Operations initiated by the server Client-to-Server Methods: Operations initiated by the client This separation provides: Clearer API boundaries Better security modeling Improved maintainability 🔄 Changes Streaming Infrastructure Request ID Support: All stream requests now include tracking identifiers Method Organization: Clear separation of directional methods in hub implementation Improved Traceability: Enhanced logging and debugging for streaming operations Architecture Improvements Cleaner Boundaries: Distinct separation between server and client initiated operations Better Organization: Methods grouped by communication direction Enhanced Clarity: More intuitive API structure for developers 💻 Usage Examples Stream Request with Tracking // Server initiates stream request with tracking var requestId = Guid.NewGuid().ToString(); await hubConnection.InvokeAsync(\"RequestLogsStreamAsync\", new GetLogsRequest { SessionId = \"session-123\", Count = 100, RequestId = requestId // Now tracked throughout the stream lifecycle }); // Client can correlate responses using the request ID LogsStreamRequested += async (request) => { logger.LogInformation($\"Processing stream request: {request.RequestId}\"); await ReceiveLogsStreamAsync(GetLogStreamAsync(request)); }; Hub Method Organization public class JiroHub : Hub<IJiroClient> { // Server-to-Client Methods public async Task NotifyClientAsync(Notification notification) { } public async Task RequestClientDataAsync(DataRequest request) { } // Client-to-Server Methods public async Task ReceiveLogsStreamAsync(IAsyncEnumerable<LogEntry> stream) { } public async Task UpdateConfigurationAsync(Configuration config) { } } 🚀 Deployment Version 1.2.2 maintains full backward compatibility No breaking changes to public APIs Existing streaming operations continue to work without modification Request ID is optional for backward compatibility 🔮 Future Considerations Request ID tracking foundation enables future distributed tracing support Method separation prepares for potential security enhancements Improved organization facilitates future API expansions Note: This release focuses on internal improvements and architectural refinements. While there are no breaking changes, the enhanced tracking and organization provide a stronger foundation for future streaming enhancements."
  },
  "docs/changelog/v1.3.0.html": {
    "href": "docs/changelog/v1.3.0.html",
    "title": "v1.3.0 \"Ōtō\" - Response Acknowledgment | Jiro.Shared Documentation",
    "keywords": "v1.3.0 \"Ōtō\" - Response Acknowledgment Release Date: July 25, 2025 Code Name: \"Ōtō\" (応答 - Response/Acknowledgment) Type: Minor Release 🎯 Overview Version 1.3.0 introduces comprehensive response acknowledgment across all WebSocket operations, replacing empty Task returns with ActionResult responses. This release also modernizes streaming operations by adopting ChannelReader for improved performance and adds machine information capabilities to the client interface. 🛠️ Technical Details ActionResult Response Pattern All WebSocket event handlers now return ActionResult instead of empty Task, providing: Acknowledgment Feedback: Clients can confirm successful operation completion Error Reporting: Detailed error information when operations fail Operation Status: Clear success/failure indication with descriptive messages Channel-Based Streaming Streaming operations have been upgraded from IAsyncEnumerable to ChannelReader : Better Performance: More efficient memory usage and throughput Improved Backpressure: Built-in flow control mechanisms Resource Management: Better cleanup and disposal patterns 🔄 Changes Response Acknowledgment Event Handlers: All stream-related events updated to expect ActionResult responses Interface Updates: IJiroClient, IJiroHubServer, and JiroClientBase aligned with new pattern Streaming Infrastructure ChannelReader Integration: All streaming methods now use ChannelReader<T> instead of IAsyncEnumerable<T> Performance Optimization: Reduced memory allocation and improved throughput Enhanced Control: Better flow control and cancellation support Enhanced Event Coverage RemoveSessionRequested: Added event handler with proper RemoveSessionRequest parameter UpdateSessionRequested: Added event handler returning ActionResult for acknowledgment MachineInfoRequested: New event for machine information retrieval from clients Complete Coverage: All hub client methods now have corresponding event implementations Documentation Enhancements XML Documentation: Added comprehensive parameter and return value documentation ActionResult Details: Detailed documentation for the new response model Usage Examples: Updated examples reflecting the new patterns 💻 Usage Examples ActionResult Response Pattern implementation // Event handler now returns ActionResult LogsStreamRequested += async (request) => { try { await ProcessLogsStream(request); return new ActionResult { IsSuccess = true, Message = \"Logs stream processed successfully\" }; } catch (Exception ex) { return new ActionResult { IsSuccess = false, Message = \"Failed to process logs stream\", Errors = new[] { ex.Message } }; } }; Channel-Based Streaming implementation // Using ChannelReader for streaming (fire-and-forget) public async Task ReceiveLogsStreamAsync(string requestId, ChannelReader<LogEntry> stream) { try { await foreach (var logEntry in stream.ReadAllAsync()) { await ProcessLogEntry(logEntry); } logger.LogInformation(\"Stream {RequestId} processed successfully\", requestId); } catch (Exception ex) { logger.LogError(ex, \"Failed to process stream {RequestId}\", requestId); } } Enhanced Event Handling // Session management with proper request objects RemoveSessionRequested += async (removeRequest) => { var result = await sessionManager.RemoveSessionAsync(removeRequest); return new ActionResult { IsSuccess = result.Success, Message = result.Message }; }; UpdateSessionRequested += async (updateRequest) => { var result = await sessionManager.UpdateSessionAsync(updateRequest); return new ActionResult { IsSuccess = result.Success, Message = result.Message }; }; // New machine information event MachineInfoRequested += async (infoRequest) => { var machineInfo = await systemService.GetMachineInfoAsync(infoRequest); return new MachineInfoResponse { RequestId = infoRequest.RequestId, Data = machineInfo }; }; 🚀 Deployment Breaking Changes Stream Parameters: Streaming methods now expect ChannelReader<T> instead of IAsyncEnumerable<T> Event Returns: Stream request events now return Task<ActionResult> for acknowledgment Session Events: RemoveSessionRequested now takes RemoveSessionRequest instead of string New Events: Implementations must handle the new MachineInfoRequested event Migration Guide // Before v1.3.0 public event Func<GetLogsRequest, Task> LogsStreamRequested; public event Func<string, Task<ActionResult>> RemoveSessionRequested; public async Task ReceiveLogsStreamAsync(string requestId, IAsyncEnumerable<LogEntry> stream) { } // After v1.3.0 public event Func<GetLogsRequest, Task<ActionResult>> LogsStreamRequested; public event Func<RemoveSessionRequest, Task<ActionResult>> RemoveSessionRequested; public event Func<MachineInfoRequest, Task<MachineInfoResponse>> MachineInfoRequested; public async Task ReceiveLogsStreamAsync(string requestId, ChannelReader<LogEntry> stream) { // Process stream (fire-and-forget) await ProcessStream(requestId, stream); } 🔮 Future Considerations Distributed Tracing: ActionResult foundation enables future distributed tracing integration Performance Monitoring: Response patterns facilitate operation performance tracking Error Analytics: Structured error reporting enables better failure analysis Flow Control: Channel-based streaming prepares for advanced flow control features Note: This release introduces breaking changes to streaming interfaces. Please review the migration guide and update your event handlers to return ActionResult responses. The new channel-based streaming provides significant performance improvements and better resource management."
  },
  "docs/changelog/v1.3.1.html": {
    "href": "docs/changelog/v1.3.1.html",
    "title": "v1.3.1 \"Seigō\" - Precision & Reliability | Jiro.Shared Documentation",
    "keywords": "v1.3.1 \"Seigō\" - Precision & Reliability Release Date: July 26, 2025 Code Name: \"Seigō\" (精確 - Precision/Accuracy) Type: Patch Release 🎯 Overview Version 1.3.1 addresses critical SignalR serialization issues and enhances logging capabilities for better debugging and monitoring. This patch release ensures reliable WebSocket communication by fixing serialization problems and providing comprehensive diagnostic information. 🛠️ Technical Details SignalR Serialization Fixes This release resolves compatibility issues with SignalR's System.Text.Json serialization by: Non-Serializable Type Removal: Eliminated Dictionary<string, Type> and TimeSpan properties that caused serialization failures Compatible Type Substitution: Replaced problematic types with STJ-compatible alternatives Response Flow Reliability: Ensured all request/response DTOs can be properly serialized and transmitted Enhanced Logging Infrastructure Comprehensive logging improvements across all SignalR operations: Detailed Request/Response Logging: Full serialization of request and response objects with structured logging Error Tracking: Exception details captured for all failed operations Handler Registration Monitoring: Warnings when event handlers are not properly configured Performance Diagnostics: Timing and success/failure tracking for all WebSocket events 🔧 Fixes Critical Serialization Issues CommandMetadata.Parameters: Changed from Dictionary<string, Type> to Dictionary<string, string> to fix CommandsMetadataRequested event serialization failures ConfigurationSection.Values: Changed from Dictionary<string, object> to Dictionary<string, string> for reliable configuration transmission ConfigResponse.Uptime: Changed from TimeSpan to double UptimeSeconds to ensure proper serialization Enhanced SignalR Extensions Null Handler Detection: Added warnings when event handlers are null, preventing silent failures Exception Handling: Comprehensive try-catch blocks with detailed error logging for all handler types Request/Response Serialization: Full object serialization in logs using structured logging ({@Request}, {@Response}) Handler Registration Confirmation: Debug-level logs confirming successful event handler registration 💻 Technical Changes SignalRStreamExtensions Improvements // Enhanced error handling and logging public static void OnRequest<TRequest, TResponse>( this HubConnection hubConnection, string eventName, Func<TRequest, Task<TResponse>> handler, ILogger? logger = null, Func<TRequest, object>? requestIdSelector = null) { if (handler == null) { logger?.LogWarning(\"Event handler for {EventName} is null - requests will not be processed\", eventName); return; } hubConnection.On<TRequest, TResponse>(eventName, async request => { var requestId = requestIdSelector?.Invoke(request); logger?.LogInformation(\"{EventName} received: {RequestId}, Request: {@Request}\", eventName, requestId, request); try { var response = await handler(request); logger?.LogInformation(\"{EventName} handled successfully: {RequestId}, Response: {@Response}\", eventName, requestId, response); return response; } catch (Exception ex) { logger?.LogError(ex, \"{EventName} handler failed: {RequestId}\", eventName, requestId); throw; } }); logger?.LogDebug(\"Event handler registered for {EventName}\", eventName); } Data Model Changes // Before v1.3.1 - Causes serialization failures public class CommandMetadata { public Dictionary<string, Type> Parameters { get; set; } = new(); } public class ConfigResponse : TrackedObject { public TimeSpan Uptime { get; set; } } // After v1.3.1 - SignalR STJ compatible public class CommandMetadata { public Dictionary<string, string> Parameters { get; set; } = new(); } public class ConfigResponse : TrackedObject { public double UptimeSeconds { get; set; } } 🐛 Bug Fixes CommandsMetadataRequested Event: Fixed serialization failure that prevented client responses from reaching the server Configuration Transmission: Resolved issues with complex configuration object serialization Silent Handler Failures: Added logging to detect when event handlers are not properly configured Response Acknowledgment: Ensured all client responses are properly serialized and transmitted to server 🔍 Debugging Improvements Structured Logging: All request/response objects now use structured logging for better log analysis Handler Lifecycle Tracking: Complete visibility into handler registration and execution Serialization Diagnostics: Clear error messages when serialization issues occur Performance Monitoring: Request processing time and success rate tracking 🚀 Deployment Non-Breaking Changes This patch release maintains API compatibility while fixing critical serialization issues: Property Name Changes: TimeSpan Uptime → double UptimeSeconds Type Parameter Changes: Dictionary<string, Type> → Dictionary<string, string> Enhanced Logging: More detailed log output (configure log levels as needed) Migration Notes // Configuration response handling // Before: TimeSpan-based uptime var uptime = configResponse.Uptime; // After: Seconds-based uptime var uptime = TimeSpan.FromSeconds(configResponse.UptimeSeconds); // Command metadata handling // Before: Type objects in parameters var paramType = commandMetadata.Parameters[\"param1\"]; // Type object // After: Type names as strings var paramTypeName = commandMetadata.Parameters[\"param1\"]; // \"System.String\" var paramType = Type.GetType(paramTypeName); // Convert back to Type if needed 🔧 Configuration Enhanced Logging Configuration To take advantage of the improved logging, configure your logging levels: { \"Logging\": { \"LogLevel\": { \"Jiro.Shared.Extensions.SignalRStreamExtensions\": \"Information\", \"Microsoft.AspNetCore.SignalR\": \"Information\" } } } Note: This patch release resolves critical serialization issues affecting WebSocket communication reliability. The enhanced logging will provide better visibility into SignalR operations and help diagnose any remaining issues. No breaking API changes are introduced."
  },
  "docs/changelog/v1.3.2.html": {
    "href": "docs/changelog/v1.3.2.html",
    "title": "v1.3.2 \"Seisō\" - Clean Logging | Jiro.Shared Documentation",
    "keywords": "v1.3.2 \"Seisō\" - Clean Logging Release Date: July 26, 2025 Code Name: \"Seisō\" (整理 - Organization/Cleanup) Type: Patch Release 🎯 Overview Version 1.3.2 refines the logging system introduced in v1.3.1 by removing verbose request and response body logging that was cluttering log output. This cleanup release maintains comprehensive error tracking while providing cleaner, more readable logs for production environments. 🛠️ Technical Details Logging Optimization This release addresses log verbosity issues by: Reduced Log Noise: Removed request body ({@Request}) and response body ({@Response}) serialization from standard operations Essential Information Retained: Kept request IDs, event names, and success/failure status logging Error Context Preserved: Exception details and error context remain fully logged Clean Production Logs: Significantly reduced log volume while maintaining debugging capabilities Streamlined Log Output The logging improvements focus on: Event Tracking: Clear indication when events are received and processed Request ID Correlation: Maintained request ID tracking for operation correlation Handler Registration: Continued logging of event handler setup and registration warnings Performance Monitoring: Success/failure tracking without verbose data serialization 🔧 Changes SignalR Logging Refinement OnRequest Method: Removed {@Request} and {@Response} serialization, keeping request ID and success indicators OnNotification Method: Removed {@Data} serialization, keeping event name and execution status OnStream Method: Removed {@Request} serialization from stream operations Error Logging: Maintained full exception details and context for debugging Before vs After Logging // Before v1.3.2 - Verbose logging LogInformation(\"CommandsMetadataRequested received: abc-123, Request: {@Request}\", ...) LogInformation(\"CommandsMetadataRequested handled successfully: abc-123, Response: {@Response}\", ...) // After v1.3.2 - Clean logging LogInformation(\"CommandsMetadataRequested received: abc-123\") LogInformation(\"CommandsMetadataRequested handled successfully: abc-123\") 💻 Log Output Examples Request Processing Logs [12:34:56 INF] CommandsMetadataRequested received: req-abc123 [12:34:56 INF] CommandsMetadataRequested handled successfully: req-abc123 [12:34:56 DBG] Event handler registered for CommandsMetadataRequested [12:35:01 INF] LogsStreamRequested stream requested [12:35:01 INF] LogsStreamRequested stream created successfully Error Handling Logs [12:36:15 ERR] CommandsMetadataRequested handler failed: req-def456 System.InvalidOperationException: Command metadata not available at Jiro.Client.CommandHandler.GetMetadata() at Jiro.Client.EventHandlers.HandleCommandsMetadata() Handler Setup Logs [12:30:00 DBG] Event handler registered for CommandsMetadataRequested [12:30:00 DBG] Event handler registered for SessionsRequested [12:30:00 WRN] Event handler for CustomThemesRequested is null - requests will not be processed 🚀 Deployment Non-Breaking Changes This patch release maintains full API compatibility: No Interface Changes: All method signatures remain identical Same Functionality: Error handling and debugging capabilities preserved Log Level Configuration: Existing log configuration remains valid Backward Compatibility: No migration required Recommended Log Configuration For optimal production logging with v1.3.2: { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Jiro.Shared.Extensions.SignalRStreamExtensions\": \"Information\", \"Microsoft.AspNetCore.SignalR\": \"Warning\" } } } Development vs Production // Development - More verbose { \"Logging\": { \"LogLevel\": { \"Jiro.Shared.Extensions.SignalRStreamExtensions\": \"Debug\" } } } // Production - Cleaner logs { \"Logging\": { \"LogLevel\": { \"Jiro.Shared.Extensions.SignalRStreamExtensions\": \"Information\" } } } 🔍 Benefits Cleaner Logs: Reduced log volume by ~60% while maintaining essential information Better Performance: Less serialization overhead during logging operations Easier Monitoring: Clearer signal-to-noise ratio in production log aggregation Cost Reduction: Lower log storage costs in cloud environments Improved Readability: Easier to scan logs for important events and errors 🐛 Issues Addressed Log Verbosity: Excessive request/response body logging cluttering log output Production Noise: Too much diagnostic information in production environments Performance Overhead: Unnecessary object serialization during normal operations Log Analysis: Difficulty identifying important events among verbose output Note: This patch release optimizes logging verbosity while preserving all debugging and error tracking capabilities. The cleaner log output will improve production monitoring and reduce log storage costs without losing essential diagnostic information."
  },
  "docs/changelog/v1.4.0.html": {
    "href": "docs/changelog/v1.4.0.html",
    "title": "v1.4.0 \"Tōgō\" - Integration & Unification | Jiro.Shared Documentation",
    "keywords": "v1.4.0 \"Tōgō\" - Integration & Unification Release Date: TBD Code Name: \"Tōgō\" (統合 - Integration/Unification) Type: Minor Release 🎯 Overview Version 1.4.0 represents a significant step toward unified architecture by integrating TaskManager infrastructure from JiroCloud services into Jiro.Shared. This release introduces enhanced command synchronization, improved gRPC integration, and comprehensive testing infrastructure while maintaining full backward compatibility. The \"Tōgō\" release focuses on unifying distributed system components under a shared foundation, making it easier for Jiro ecosystem applications to manage asynchronous operations and inter-service communication. 🚀 Major Features TaskManager Infrastructure Integration Unified Task Management: Migrated TaskManager from JiroCloud services to Jiro.Shared for ecosystem-wide availability Distributed System Support: Built-in support for managing tasks across multiple Jiro instances Timeout Management: Automatic timeout monitoring and cleanup for long-running operations Stream Operations: Channel-based streaming support for real-time data processing New Components: // Task management interfaces public interface ITaskManager { } public interface IInstanceTaskManager { } // Core implementation public class TaskManager : ITaskManager, IInstanceTaskManager, IDisposable // Supporting models public class QueuedRequest public class InstanceManagedTask public class ChannelStreamTask public class TaskManagerOptions Enhanced Command Response Architecture SynchronizationToken Model: New token-based command tracking replacing simple string IDs Polymorphic Results: Improved command result handling with type-safe polymorphism Session Integration: Enhanced session and instance correlation for distributed scenarios Key Models: public class SynchronizationToken { public string InstanceId { get; set; } public string SessionId { get; set; } public string RequestId { get; set; } } public enum CommandType { Text = 0, Graph = 1 } public abstract class CommandResult public class TextResult : CommandResult public class GraphResult : CommandResult gRPC Protocol Buffer Distribution Proto File Packaging: jiroHub.proto now included in NuGet package for client generation Service Generation Support: Consuming projects can generate gRPC services from shared proto definitions Version Synchronization: Ensures protocol consistency across Jiro ecosystem components 🛠️ Technical Improvements Namespace Reorganization Tasks Namespace: All task management components moved to Jiro.Shared.Tasks Shared Models: Core models relocated to root Jiro.Shared namespace for better accessibility gRPC Extensions: Enhanced ClientMessage conversion with proper type disambiguation Test Infrastructure Complete Test Suite: Added comprehensive test coverage for TaskManager functionality CI Integration: Tests run automatically on PR and main branch commits Mock Support: Full Moq integration for unit testing scenarios Build & Packaging NuGet Enhancement: Proto files included in package for downstream code generation Content Files: Proper content file packaging for modern NuGet compatibility Version Synchronization: Updated to .NET 9.0 with latest dependency versions 🔧 Breaking Changes Namespace Updates Applications using TaskManager components from JiroCloud services need namespace updates: // Before v1.4.0 using JiroCloud.Core.Services.ResponseTask; using JiroCloud.Core.Services.ResponseTask.Models; // After v1.4.0 using Jiro.Shared.Tasks; using Jiro.Shared.Tasks.Models; Model Relocations Shared models moved from websocket-specific namespaces: // Before v1.4.0 using Jiro.Shared.Websocket.Models; // After v1.4.0 using Jiro.Shared; // SynchronizationToken, CommandType, CommandResult Command Response Architecture Enhanced command response model with synchronization tokens: // Before v1.4.0 public class SessionCommandResponse { public string CommandSyncId { get; set; } } // After v1.4.0 public class SessionCommandResponse { public SynchronizationToken SynchronizationToken { get; set; } } 📦 NuGet Package Changes Proto File Distribution The jiroHub.proto file is now included in the NuGet package: <ItemGroup> <Protobuf Include=\"Grpc\\jiroHub.proto\" GrpcServices=\"Client\" /> </ItemGroup> Content Files Structure contentFiles/any/any/Grpc/jiroHub.proto content/Grpc/jiroHub.proto 🧪 Testing & CI Test Coverage TaskManager Tests: Complete test suite covering all TaskManager operations Mock Integration: Moq-based testing for logger and configuration dependencies Timeout Scenarios: Comprehensive timeout and cancellation testing Stream Operations: Channel-based streaming operation tests Continuous Integration Automated Testing: Tests run on every PR and main branch commit Code Coverage: Coverage collection and reporting via Codecov Build Verification: Multi-configuration build testing (Debug/Release) 🔍 Migration Guide For JiroCloud Applications Update Namespaces: // Replace all instances using JiroCloud.Core.Services.ResponseTask; // With using Jiro.Shared.Tasks; Update Model References: // Old websocket-specific imports using Jiro.Shared.Websocket.Models.SynchronizationToken; // New shared imports using Jiro.Shared.SynchronizationToken; Command Response Updates: // Update command sync ID usage response.SynchronizationToken.RequestId // instead of CommandSyncId response.SynchronizationToken.SessionId response.SynchronizationToken.InstanceId For New Applications Install Updated Package: <PackageReference Include=\"Jiro.Shared\" Version=\"1.4.0\" /> TaskManager Registration: services.Configure<TaskManagerOptions>(options => { options.DefaultTimeoutSeconds = 30; options.MaxPendingTasks = 1000; }); services.AddSingleton<ITaskManager, TaskManager>(); Proto File Usage: <ItemGroup> <Protobuf Include=\"Grpc\\jiroHub.proto\" GrpcServices=\"Both\" /> </ItemGroup> 🐛 Issues Addressed Task Management Fragmentation: Unified task management across Jiro ecosystem Command Synchronization: Enhanced command tracking with comprehensive token system gRPC Integration: Simplified service generation with packaged proto files Testing Infrastructure: Complete test coverage for reliability assurance Namespace Consistency: Logical organization of shared components 📈 Performance Improvements Efficient Task Tracking: Optimized concurrent dictionary usage for task management Memory Management: Proper disposal patterns and resource cleanup Stream Processing: Channel-based streaming with backpressure handling Timeout Monitoring: Background service for automatic task cleanup 🔗 Dependencies Updated Dependencies Microsoft.EntityFrameworkCore.* → 9.0.8 Microsoft.AspNetCore.SignalR.Client → 9.0.8 Microsoft.Extensions.* → 9.0.8 Z.EntityFramework.Plus.EFCore → 9.103.9.2 Test Dependencies Microsoft.NET.Test.Sdk → 17.14.1 xUnit → 2.9.3 xUnit.runner.visualstudio → 3.1.3 Coverlet.collector → 6.0.4 Note: This release provides a unified foundation for task management and command synchronization across the Jiro ecosystem. The integration of TaskManager infrastructure enables more sophisticated distributed system scenarios while maintaining the simplicity and reliability that Jiro.Shared is known for."
  },
  "docs/changelog/v1.4.1.html": {
    "href": "docs/changelog/v1.4.1.html",
    "title": "v1.4.1 \"Teikyō\" - Enhanced Proto File Distribution | Jiro.Shared Documentation",
    "keywords": "v1.4.1 \"Teikyō\" - Enhanced Proto File Distribution Release Date: 2025-08-05 Code Name: \"Teikyō\" (提供 - Provision/Supply) Type: Patch Release 🎯 Overview Version 1.4.1 focuses on improving gRPC protocol buffer file distribution in the NuGet package, making it significantly easier for consumers to import and use the shared proto definitions. This patch release enhances the packaging approach based on best practices for gRPC proto file sharing. The \"Teikyō\" release ensures that proto files are properly provisioned to consuming projects with enhanced visibility and accessibility. 🚀 Key Improvements Enhanced Proto File Packaging Improved Content Configuration: Updated proto file packaging to use enhanced <Content> tags with proper visibility settings Copy to Output Directory: Proto files are now automatically copied to the output directory with CopyToOutputDirectory=\"PreserveNewest\" Enhanced Visibility: Added Visible=\"true\" attribute to make proto files visible in consuming project Solution Explorer Wildcard Pattern Support: Uses Grpc\\**\\*.proto pattern to automatically include future proto files in subdirectories Updated Configuration: <ItemGroup> <!-- Copy proto files into the package for consumers to import --> <Content Include=\"Grpc\\**\\*.proto\" Pack=\"true\" PackagePath=\"contentFiles\\any\\any\\Grpc\\\" Visible=\"true\"> <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory> </Content> <Content Include=\"Grpc\\**\\*.proto\" Pack=\"true\" PackagePath=\"content\\Grpc\\\" Visible=\"true\"> <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory> </Content> </ItemGroup> Consumer Experience Improvements Better Project Integration: Proto files now appear directly in consuming projects' file explorer Simplified Import Process: Enhanced support for AdditionalImportDirs in consuming projects Backward Compatibility: Maintains support for both modern PackageReference and legacy packages.config workflows Documentation Alignment: Package configuration now follows established best practices for gRPC proto sharing 🛠️ Technical Changes Package Structure Enhancement The proto files are now packaged in both content paths for maximum compatibility: contentFiles/any/any/Grpc/jiroHub.proto # Modern .NET Core/5+ projects content/Grpc/jiroHub.proto # Legacy .NET Framework projects Build Integration Automatic Discovery: Wildcard patterns ensure future proto files are automatically included Output Directory Copying: Proto files are available in consuming project's output directory Enhanced Visibility: Proto files appear in Solution Explorer for better developer experience 📦 For Package Consumers Recommended Usage Pattern Consuming projects can now more easily reference the shared proto files: <ItemGroup> <!-- Reference the shared contracts package with path generation --> <PackageReference Include=\"Jiro.Shared\" Version=\"1.4.1\" GeneratePathProperty=\"true\" /> <!-- Include proto files with import directory support --> <Protobuf Include=\"Protos\\*.proto\" ProtoRoot=\"Protos\" AdditionalImportDirs=\"$(PkgJiro_Shared)\\content\\Grpc\" GrpcServices=\"Both\" /> </ItemGroup> Import in Proto Files syntax = \"proto3\"; import \"jiroHub.proto\"; // Now more reliably resolved option csharp_namespace = \"YourProject.Services\"; // Your service definitions here 🔧 Migration Notes This is a patch release with no breaking changes. Existing consumers will automatically benefit from the improved packaging without any code changes required. For New Consumers Proto files are now more visible in Solution Explorer Import resolution is more reliable across different project configurations Enhanced support for both modern and legacy .NET project styles 🐛 Issues Addressed Proto File Visibility: Proto files now appear properly in consuming project file explorers Import Resolution: Enhanced reliability of proto file import resolution in consuming projects Package Compatibility: Improved support for different NuGet package consumption patterns Build Integration: Better integration with MSBuild and gRPC tooling workflows 📈 Benefits Developer Experience: Proto files are now visible and easily accessible in consuming projects Build Reliability: Enhanced build-time proto file resolution and copying Future-Proofing: Wildcard patterns automatically include new proto files Standards Compliance: Package structure follows established gRPC proto sharing best practices 🔗 Dependencies No dependency changes in this release. All dependencies remain the same as v1.4.0. Note: This patch release focuses exclusively on improving the gRPC proto file distribution experience. The enhanced packaging approach makes it significantly easier for consumers to import and use the shared jiroHub.proto definitions in their own projects."
  },
  "docs/changelog/v1.4.2.html": {
    "href": "docs/changelog/v1.4.2.html",
    "title": "v1.4.2 \"Nagare\" - Comprehensive Streaming Support | Jiro.Shared Documentation",
    "keywords": "v1.4.2 \"Nagare\" - Comprehensive Streaming Support Release Date: 2025-08-06 Code Name: \"Nagare\" (流れ - Flow) Type: Minor Release 🎯 Overview Version 1.4.2 introduces comprehensive streaming capabilities for both gRPC and SignalR communication methods, enabling real-time data flow between Jiro instances and JiroCloud. This release adds three essential streaming functionalities: chat messages, logs, and word-by-word message content. The \"Nagare\" release establishes a robust foundation for streaming communication, allowing for efficient real-time data transmission across the Jiro ecosystem. 🚀 Key Features gRPC Streaming Services StreamChatMessagesToServer: Client streaming for chat messages from Jiro instances to JiroCloud StreamLogsToServer: Client streaming for logs with enhanced metadata support StreamWordsToServer: Client streaming for word-by-word message content delivery Updated gRPC Service Definition: service JiroHubProto { // Existing services... // Client streaming for chat messages from client to server rpc StreamChatMessagesToServer (stream ChatMessage) returns (ChatStreamResponse); // Client streaming for logs from client to server rpc StreamLogsToServer (stream LogEntry) returns (LogStreamResponse); // Client streaming for word-by-word message content from client to server rpc StreamWordsToServer (stream WordStreamUpdate) returns (WordStreamResponse); } SignalR Streaming Integration Enhanced Hub Interfaces: Added streaming request and receive methods to both client and server interfaces Event Coordination: New events for managing streaming operations Channel-Based Streaming: Support for ChannelReader<T> streaming patterns New SignalR Events: // Server-to-client requests public const string StreamChatMessagesRequested = \"StreamChatMessagesRequested\"; public const string StreamWordsRequested = \"StreamWordsRequested\"; // Client-to-server streaming public const string StreamChatMessagesToServer = \"StreamChatMessagesToServer\"; public const string StreamWordsToServer = \"StreamWordsToServer\"; 🔧 Technical Enhancements Protocol Buffer Message Types Enhanced LogEntry message LogEntry { string id = 1; string level = 2; // Log level (DEBUG, INFO, WARN, ERROR) string message = 3; // Log message content string source = 4; // Source component or module google.protobuf.Timestamp timestamp = 5; // When log was generated map<string, string> metadata = 6; // Additional log metadata } Word Streaming Support message WordStreamUpdate { string sessionId = 1; // Session ID for the message string messageId = 2; // ID of the message being streamed string word = 3; // The word or token being sent int32 position = 4; // Position of word in the message bool isComplete = 5; // True when message is fully streamed google.protobuf.Timestamp timestamp = 6; // When this word was sent } SignalR Interface Updates Client Interface (IJiroHubClient) // Request streaming operations from client Task<ActionResult> RequestChatMessagesStreamAsync(StreamChatRequest request); Task<ActionResult> RequestWordStreamAsync(StreamWordRequest request); Server Interface (IJiroHubServer) // Receive streaming data from client Task ReceiveChatMessagesStreamAsync(string requestId, ChannelReader<ChatMessage> stream); Task ReceiveWordStreamAsync(string requestId, ChannelReader<WordUpdate> stream); 🛠️ New Types and Models Request Types StreamChatRequest: Configuration for chat message streaming with session ID and buffer size StreamWordRequest: Configuration for word streaming with message ID and buffer settings Response Types WordUpdate: SignalR word update with message context and completion status ChatStreamResponse: gRPC response for chat streaming operations LogStreamResponse: gRPC response for log streaming operations WordStreamResponse: gRPC response for word streaming operations 📋 Communication Flow Complete Streaming Pattern Server Request Phase: JiroCloud requests streaming via IJiroHubClient methods Client Response Phase: Jiro instance responds by sending stream data via IJiroHubServer methods Data Flow: Real-time streaming of chat messages, logs, or word-by-word content Supported Streaming Types Type Description Use Case Chat Messages Full chat message streaming Real-time conversation sync Logs System log streaming with metadata Live monitoring and debugging Word Stream Word-by-word content delivery Progressive message display 🔄 Migration and Compatibility Backward Compatibility 100% Compatible: No breaking changes to existing APIs Additive Changes: All new functionality is additive Existing Integrations: Current gRPC and SignalR usage continues unchanged For Existing Consumers Streaming features are opt-in and don't affect existing workflows Previous communication patterns remain fully supported No code changes required for existing implementations 🐛 Issues Resolved Duplicate Method Definitions: Cleaned up overlapping streaming method definitions Directional Clarity: Removed unused server-to-client streaming to maintain clear client-to-server flow Event Naming: Established consistent event naming convention for streaming operations Interface Consistency: Aligned SignalR and gRPC streaming patterns 📈 Performance Benefits Efficient Streaming: Channel-based streaming reduces memory overhead Real-time Capability: Enables true real-time communication between instances Scalable Architecture: Streaming design supports high-throughput scenarios Reduced Latency: Direct streaming eliminates request-response roundtrip delays 🔗 Dependencies No dependency changes in this release. All dependencies remain consistent with v1.4.1: Grpc.AspNetCore: 2.71.0 Google.Protobuf: 3.31.1 Microsoft.AspNetCore.SignalR: 1.2.0 Microsoft.AspNetCore.SignalR.Client: 9.0.8 Implementation Note: This release establishes the streaming infrastructure foundation for the Jiro ecosystem. The three streaming types (chat, logs, words) provide comprehensive real-time communication capabilities between Jiro instances and JiroCloud services."
  },
  "docs/changelog/v1.4.3.html": {
    "href": "docs/changelog/v1.4.3.html",
    "title": "v1.4.3 \"Seiri\" - Code Organization & Serialization Cleanup | Jiro.Shared Documentation",
    "keywords": "v1.4.3 \"Seiri\" - Code Organization & Serialization Cleanup Release Date: 2025-01-08 Code Name: \"Seiri\" (整理 - Organization/Cleanup) Type: Patch Release 🎯 Overview Version 1.4.3 is a focused cleanup release that eliminates code duplication and resolves serialization issues within the Jiro.Shared library. This release refactors the command result architecture to eliminate redundancy with the main Jiro.Commands project, resulting in cleaner separation of concerns and improved maintainability. The \"Seiri\" release embodies the Japanese concept of organization and systematic arrangement, removing unnecessary complexity while maintaining full backward compatibility. 🔧 Breaking Changes ⚠️ Command Result Type Removal Affected Types (removed from Jiro.Shared): ICommandResult interface TextResult class GraphResult class CommandType enum TextType enum Migration Path: Applications should use their own ICommandResult implementations from domain-specific packages (e.g., Jiro.Commands) instead of relying on Jiro.Shared types. SessionCommandResponse Changes Before (v1.4.2): public class SessionCommandResponse { public CommandType CommandType { get; set; } // Enum public ICommandResult? Result { get; set; } // Strongly typed } After (v1.4.3): public class SessionCommandResponse { public string CommandType { get; set; } // String for flexibility public object? Result { get; set; } // Generic object } 🚀 Key Improvements Architecture Cleanup Eliminated Duplication: Removed duplicate ICommandResult types that existed in both Jiro.Shared and Jiro.Commands Proper Separation: Jiro.Shared now focuses purely on transport/communication contracts Domain Independence: Applications can use their own command result implementations Enhanced Serialization Generic Result Handling: SessionCommandResponse.Result is now object? for maximum flexibility JSON Compatibility: Full JSON serialization support with proper type handling Framework Agnostic: No dependency on specific result type implementations gRPC Extension Updates Updated ClientMessageExtensions: // Now creates anonymous objects instead of typed results Result = new { Response = textResult.Response, TextType = textResult.TextType.ToString().ToLower() } 📋 Technical Details Serialization Behavior The updated SessionCommandResponse serializes all result types as JSON objects: String Results: { \"commandType\": \"text\", \"result\": \"Simple string result\" } Complex Results: { \"commandType\": \"graph\", \"result\": { \"message\": \"Graph data\", \"data\": \"{\\\"x\\\":[1,2,3]}\", \"units\": {\"x\": \"seconds\"} } } Consumer Implementation Applications consuming Jiro.Shared should implement their own result type handling: // In consuming application var response = await GetSessionCommandResponse(); if (response.Result is JsonElement element) { var myResult = JsonSerializer.Deserialize<MyCustomResult>(element); // Handle typed result } 🧪 New Test Coverage Serialization Tests Added comprehensive test suite for SessionCommandResponse serialization: String result serialization/deserialization Complex object result handling Null result handling Empty command type scenarios Test Coverage: 4 new test methods ensuring robust serialization behavior 🔄 Migration Guide For Library Consumers Remove Direct Type Dependencies: Stop importing command result types from Jiro.Shared Implement Domain Types: Use your own ICommandResult implementations Update Deserialization: Handle object? results with proper type conversion String Command Types: Update code expecting CommandType enum to handle strings Example Migration Before: using Jiro.Shared; var response = await client.ExecuteCommand(); if (response.Result is TextResult textResult) { Console.WriteLine(textResult.Response); } After: using MyApp.Commands; // Your own result types var response = await client.ExecuteCommand(); if (response.Result is JsonElement element) { var textResult = JsonSerializer.Deserialize<MyTextResult>(element); Console.WriteLine(textResult.Response); } 🐛 Issues Resolved Serialization Conflicts: Eliminated polymorphic serialization issues with abstract types Type Duplication: Removed redundant type definitions between projects Architecture Coupling: Decoupled transport layer from domain-specific types Maintenance Overhead: Reduced code duplication and maintenance burden 📈 Benefits Development Experience Cleaner Architecture: Clear separation between shared infrastructure and domain logic Flexible Integration: Applications can define their own result type hierarchies Reduced Coupling: No forced dependency on specific command result implementations Performance & Reliability Improved Serialization: Eliminated complex polymorphic serialization scenarios Smaller Footprint: Reduced assembly size by removing unnecessary types Better Testability: Simplified testing with generic object handling 🔗 Dependencies No dependency changes in this release. All dependencies remain consistent with v1.4.2: Grpc.AspNetCore: 2.71.0 Google.Protobuf: 3.31.1 Microsoft.AspNetCore.SignalR: 1.2.0 Microsoft.AspNetCore.SignalR.Client: 9.0.8 ⚡ Compatibility Backward Compatibility Transport Layer: Full compatibility for WebSocket and gRPC communication JSON Serialization: Previous JSON structures remain parseable Extension Methods: ClientMessageExtensions maintain same method signatures Forward Compatibility Extensible Design: Generic object? result type supports any future result implementations Version Agnostic: No version-specific type dependencies Implementation Note: This release focuses on architectural cleanup and proper separation of concerns. While some types have been removed from Jiro.Shared, the functionality remains available through domain-specific implementations in consuming applications, resulting in a cleaner and more maintainable architecture."
  },
  "docs/changelog/v1.4.4.html": {
    "href": "docs/changelog/v1.4.4.html",
    "title": "v1.4.4 \"Shūsei\" - Interface Alignment & Event Fix | Jiro.Shared Documentation",
    "keywords": "v1.4.4 \"Shūsei\" - Interface Alignment & Event Fix Release Date: 2025-01-08 Code Name: \"Shūsei\" (修正 - Correction/Fix) Type: Patch Release 🎯 Overview Version 1.4.4 is a focused bug fix release that resolves an interface implementation mismatch in the JiroInstanceBase class. This release ensures proper alignment between the IJiroInstance interface and its implementation, specifically correcting the CommandReceived event signature to return the expected ActionResult. The \"Shūsei\" release embodies the Japanese concept of correction and refinement, fixing implementation inconsistencies while maintaining full backward compatibility. 🐛 Fixed Issues ⚠️ Interface Implementation Mismatch Issue: The JiroInstanceBase class did not properly implement the IJiroInstance interface for the CommandReceived event. Problem: // Interface definition (IJiroInstance.cs:38) public event Func<CommandMessage, Task<ActionResult>>? CommandReceived; // Implementation (JiroInstanceBase.cs:57) - INCORRECT public event Func<CommandMessage, Task>? CommandReceived; Resolution: // Fixed implementation (JiroInstanceBase.cs:57) - CORRECT public event Func<CommandMessage, Task<ActionResult>>? CommandReceived; Event Handling Correction Issue: The event setup used fire-and-forget notification pattern instead of request-response pattern. Before (v1.4.3): // Used OnNotification (fire-and-forget) _hubConnection.OnNotification<CommandMessage>(Events.CommandReceived, async command => { if (CommandReceived != null) await CommandReceived(command); }, _logger); After (v1.4.4): // Uses OnRequest (expects return value) _hubConnection.OnRequest<CommandMessage, ActionResult>( Events.CommandReceived, async command => await CommandReceived!(command), _logger); 🔧 Technical Changes Files Modified Websocket/JiroClientBase.cs: Line 57: Updated CommandReceived event signature Lines 169-173: Changed from OnNotification to OnRequest setup Impact Analysis Interface Compliance: JiroInstanceBase now fully implements IJiroInstance Return Value Handling: Commands now properly return ActionResult to the server WebSocket Communication: Correct request-response pattern established Backward Compatibility: Maintained - existing implementations will need to return ActionResult 🚀 Key Improvements Architecture Correctness Interface Alignment: Perfect match between interface contract and implementation Proper Communication Pattern: Commands now follow request-response pattern as intended Type Safety: Ensures ActionResult is returned from command execution Enhanced Reliability Contract Enforcement: Interface compliance ensures consistent behavior across implementations Response Handling: Server can now properly receive command execution results Error Propagation: Failures can be communicated back through ActionResult.IsSuccess 📋 Breaking Changes ⚠️ Command Handler Return Type Impact: Implementations of CommandReceived event handlers must now return Task<ActionResult>. Migration Required: Before (v1.4.3): client.CommandReceived += async (command) => { // Process command await ProcessCommand(command); // No return value }; After (v1.4.4): client.CommandReceived += async (command) => { try { // Process command await ProcessCommand(command); // Return success result return new ActionResult { IsSuccess = true, Message = \"Command executed successfully\" }; } catch (Exception ex) { // Return error result return new ActionResult { IsSuccess = false, Message = \"Command execution failed\", Errors = new[] { ex.Message } }; } }; 🔄 Migration Guide For Existing Implementations Update Event Handlers: Modify CommandReceived event handlers to return Task<ActionResult> Add Success Responses: Return ActionResult with IsSuccess = true for successful operations Handle Errors: Return ActionResult with IsSuccess = false and error details for failures Test Integration: Verify command execution results are properly communicated to the server Example Implementation public class MyJiroClient : JiroInstanceBase { protected override void SetupHandlers() { CommandReceived += async (command) => { _logger?.LogInformation(\"Executing command: {Command}\", command.Command); try { // Execute the command var result = await ExecuteCommandAsync(command); return new ActionResult { IsSuccess = true, Message = $\"Command '{command.Command}' executed successfully\" }; } catch (Exception ex) { _logger?.LogError(ex, \"Command execution failed: {Command}\", command.Command); return new ActionResult { IsSuccess = false, Message = \"Command execution failed\", Errors = new[] { ex.Message } }; } }; } } 🧪 Verification Build Verification ✅ Compilation: All projects compile without errors ✅ Interface Compliance: JiroInstanceBase fully implements IJiroInstance ✅ Type Safety: No type mismatches in event signatures ✅ Documentation: XML documentation updated to reflect return type Testing Recommendations For applications updating to v1.4.4: Unit Tests: Verify command handlers return proper ActionResult objects Integration Tests: Test end-to-end command execution with result handling Error Scenarios: Ensure error conditions return appropriate failure results 📈 Benefits Developer Experience Clear Contracts: Interface and implementation are now perfectly aligned Better Error Handling: Commands can communicate success/failure back to server IDE Support: IntelliSense correctly shows return type requirements System Reliability Consistent Behavior: All implementations must follow same return pattern Error Visibility: Failed commands can be properly tracked and logged Integration Clarity: Clear communication pattern between client and server 🔗 Dependencies No dependency changes in this release. All dependencies remain consistent with v1.4.3: Grpc.AspNetCore: 2.71.0 Google.Protobuf: 3.31.1 Microsoft.AspNetCore.SignalR: 1.2.0 Microsoft.AspNetCore.SignalR.Client: 9.0.8 ⚡ Compatibility Backward Compatibility ⚠️ Limited: Command handlers require modification to return ActionResult Transport Layer: WebSocket and gRPC communication protocols unchanged Data Models: All request/response models remain identical Forward Compatibility ActionResult Contract: Stable interface for command execution results Extensible Design: ActionResult supports additional metadata through Errors array Implementation Note: This release corrects a critical interface implementation mismatch that could lead to runtime errors or unexpected behavior. While it requires minimal code changes in consuming applications, it ensures proper contract compliance and enables reliable command result communication between clients and servers."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Jiro.Shared Documentation | Jiro.Shared Documentation",
    "keywords": "Jiro.Shared Documentation Welcome to the Jiro.Shared documentation! This library provides shared types and models for the Jiro ecosystem applications. Getting Started Jiro.Shared is a foundational library that provides common types, models, and utilities used across the Jiro ecosystem, including JiroCloud and Jiro instances. Features WebSocket Communication: Predefined endpoint definitions for consistent WebSocket communication gRPC Integration: Protocol buffer definitions and strongly-typed gRPC services Request/Response Models: Comprehensive models for chat sessions, commands, configuration, logging, and themes Type Safety: Strongly-typed communication contracts with compile-time validation Documentation: Full XML documentation for IntelliSense support Quick Start To get started with Jiro.Shared, install the NuGet package: dotnet add package Jiro.Shared Documentation Sections API Reference - Complete API documentation Changelog - Version history and release notes Support For issues and feature requests, please visit our GitHub repository."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Jiro.Shared | Jiro.Shared Documentation",
    "keywords": "Welcome to Jiro.Shared Jiro.Shared is a foundational library providing shared types, models, and utilities used across the Jiro ecosystem, including JiroCloud and Jiro instances. It ensures consistent communication contracts and type safety throughout the entire system. 🚀 Quick Start Get started with Jiro.Shared in minutes: Documentation - Learn about shared types and models API Reference - Explore the complete API documentation Installation Guide - Setup and configuration guide ✨ Key Features 🔗 WebSocket Endpoints - Predefined endpoint constants for real-time communication 📡 gRPC Definitions - Protocol buffer definitions for efficient service communication � Shared Models - Common request and response data transfer objects (DTOs) �️ Type Safety - Strongly-typed contracts for reliable inter-service communication � Documentation - Full XML documentation for excellent IntelliSense support 📚 Documentation Sections 📖 Documentation Project overview and architecture Getting started guides Type definitions and usage Integration examples Changelog and version history 🔧 API Reference Complete .NET API documentation Class and interface references Method documentation with examples Generated from source code 🏗️ Architecture Overview Jiro.Shared serves as the foundation for communication across the Jiro ecosystem: WebSocket Communication - Real-time messaging contracts and endpoint definitions gRPC Services - Efficient binary communication protocols Shared Models - Common data transfer objects used throughout the ecosystem Type Safety - Strongly-typed contracts ensuring reliable communication 🤝 Contributing We welcome contributions! Please see our documentation for guidelines on how to contribute to the Jiro project. Ready to dive in? Start with Documentation or explore the API Reference."
  }
}